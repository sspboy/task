
declare module 'media' {

  /**
   * @中文
   *
   * media模块提供多媒体编程的支持。目前仅支持音乐播放和媒体文件扫描。后续会结合UI加入视频播放等功能。
   *
   * @eng
   *
   * media module provides multimedia programming support. Currently only music playing and media file scanning are supported.
   *
   * @packageDocumentation
   */
  /**
   * @中文
   *
   * 多媒体播放器。提供更丰富的音乐播放管理功能。比如播放、暂停、进度监听等。
   *
   * @eng
   *
   * Multimedia player. Provide more rich music playing management function. For example, play, pause, progress listener, etc.
   *
   * @example
   * ```javascript
   * "nodejs";
   * const { MediaPlayer } = require("media");
   * const player = new MediaPlayer();
   * player.play("/sdcard/Music/test.mp3");
   * setInterval(() => {
   *     console.log(player.currentPosition);
   * }, 1000);
   * ```
   *
   * @see https://developer.android.com/reference/android/media/MediaPlayer
   */
  export declare class MediaPlayer {
      private player;
      private prepareDeferred;
      private seekDeferred;
      private completionDeferred?;
      private exitListener;
      constructor();
      /**
       * @中文
       *
       * 播放音乐。在async函数中可使用await关键字等待播放完成。
       *
       * @param uri 音乐文件路径，或网址。
       * @param volume 播放音量，为0~1的浮点数，默认为1。
       * @param looping 是否循环播放，如果looping为true则循环播放，默认为false。
       *
       * @eng
       *
       * Play music. In 'async function' can be used keyword 'await' to wait for the music to be played.
       *
       * @param uri The music file path, or the URL.
       * @param volume The volume of the music, a float number between 0 and 1, default is 1.
       * @param looping Whether to loop the music, if looping is true, the music will be looped, default is false.
       */
      play(uri: string, volume?: number, looping?: boolean): Promise<void>;
      /**
       * @中文
       *
       * 音乐时长。单位毫秒。
       *
       * @eng
       *
       * The duration of the music. Unit is millisecond.
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer#getDuration()
       */
      get duration(): number;
      /**
       * @中文
       *
       * 当前播放位置。单位毫秒。
       *
       * @eng
       *
       * The current position of the music. Unit is millisecond.
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer#getCurrentPosition()
       *
       */
      get currentPosition(): number;
      /**
       * @中文
       *
       * 安卓原生播放器的对象。
       *
       * @eng
       *
       * The native player of Android.
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer
       */
      get androidMediaPlayer(): android.media.MediaPlayer;
      /**
       * @中文
       *
       * 是否正在播放
       *
       * @eng
       *
       * Whether the music is playing
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer#isPlaying()
       */
      get isPlaying(): boolean;
      /**
       * @中文
       *
       * 重置播放器
       *
       * @eng
       *
       * Reset the player
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer#reset()
       */
      reset(): void;
      /**
       * @中文
       *
       * 设置音乐播放的数据源，支持本地文件路径、网络音乐地址。
       *
       * @param path 数据源路径，比如/sdcards/test.mp3, http://www.example.com/test.mp3
       *
       * @eng
       *
       * Set the data source, support local file path, or network url address.
       *
       * @param path The data source path, for example, /sdcard/test.mp3, http://www.example.com/test.mp3
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer#setDataSource(java.lang.String)
       */
      setDataSource(path: string): void;
      /**
       * @中文
       *
       * 设置音量
       *
       * @param leftVolume 左声道音量，为0~1的浮点数。
       * @param rightVolume 右声道音量，为0~1的浮点数，默认等同于左声道。
       *
       * @eng
       *
       * Set the volume
       *
       * @param leftVolume The volume of the left channel, a float number between 0 and 1.
       * @param rightVolume The volume of the right channel, a float number between 0 and 1, default is equal to left channel.
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer#setVolume(float,%20float)
       */
      setVolume(leftVolume: number, rightVolume?: number): void;
      /**
       * @中文
       *
       * 设置循环播放
       *
       * @param looping 是否循环播放，如果looping为true则循环播放，默认为false。
       *
       * @eng
       *
       * Set the looping
       *
       * @param looping Whether to loop the music, if looping is true, the music will be looped, default is false.
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer#setLooping(boolean)
       */
      setLooping(looping: boolean): void;
      /**
       * @中文
       *
       * 准备播放器进行播放。手动设置数据源后，需要调用prepare()或prepareSync()后才能开始播放，用于加载或下载音乐文件。
       *
       * 如果直接使用paly()函数播放，则无需调用本函数，因为play()函数会自动调用prepare()。
       *
       * @eng
       *
       * Prepares the player for playback,. After setting the datasource and the display surface, you need to either call prepare() or prepareSync().
       *
       * For files, it is OK to call prepare(), which blocks until MediaPlayer is ready for playback.
       *
       * @example
       * ```javascript
       * "nodejs";
       * const { MediaPlayer } = require("media");
       * async function main() {
       *     const player = new MediaPlayer();
       *     player.setDataSource("https://www.example.com/test.mp3");
       *     await player.prepare();
       *     player.start();
       *     await player.awaitForCompletion();
       * }
       * main();
       * ```
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer#prepareAsync()
       */
      prepare(): Promise<void>;
      /**
       * @中文
       *
       * 同步准备播放器进行播放。手动设置数据源后，需要调用prepare()或prepareSync()后才能开始播放，用于加载或下载音乐文件。
       *
       * 如果直接使用paly()函数播放，则无需调用本函数，因为play()函数会自动调用prepare()。
       *
       * @eng
       *
       * Prepares the player for playback, synchronously. After setting the datasource and the display surface, you need to either call prepare() or prepareAsync().
       *
       * For files, it is OK to call prepare(), which blocks until MediaPlayer is ready for playback.
       *
       * If you call play() directly, you do not need to call prepareSync(), because play() will automatically call prepare().
       *
       * @example
       * ```javascript
       * "nodejs";
       * const { MediaPlayer } = require("media");
       * const player = new MediaPlayer();
       * player.setDataSource("/sdcard/Music/test.mp3");
       * player.prepareSync();
       * player.start();
       * $autojs.keepRunning();
       * ```
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer#prepare()
       */
      prepareSync(): void;
      /**
       * @中文
       *
       * 跳转到指定的时间播放。
       *
       * @param msec 指定的时间，单位为毫秒。
       *
       * @eng
       *
       * Seeks to specified time position. Unit is millisecond.
       *
       * @param msec the offset in milliseconds from the start to seek to
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer#seekTo(int)
       */
      seekTo(msec: number): Promise<void>;
      /**
       * @中文
       *
       * 开始播放
       *
       * @eng
       *
       * Start playing
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer#start()
       *
       */
      start(): void;
      /**
       * @中文
       *
       * 暂停播放
       *
       * @eng
       *
       * Pause playing
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer#pause()
       */
      pause(): void;
      /**
       * @中文
       *
       * 停止播放
       *
       * @eng
       *
       * Stop playing
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer#stop()
       */
      stop(): void;
      /**
       * @中文
       *
       * 设置播放时是否保持屏幕常亮
       *
       * @param keep 是否保持常亮
       *
       * @eng
       *
       * @param keep Whether to keep screen on
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer#setScreenOnWhilePlaying(boolean)
       */
      setScreenOnWhilePlaying(keep: boolean): void;
      /**
       * @中文
       *
       * 释放与此 MediaPlayer 对象关联的资源。推荐在使用完 MediaPlayer后立即调用此方法。尤其是在应用的UI进入后台时，应调用此方法以释放 MediaPlayer 对象，除非应用程序有特殊的需求保持对象存活。
       *
       * 若未能立即调用该方法释放资源，除了占用不必要的资源（例如内存和编解码器的实例）外，还可能导致移动设备持续消耗电池。
       *
       * @eng
       *
       * Releases resources associated with this MediaPlayer object. It is considered good practice to call this method when you're done using the MediaPlayer. In particular, whenever an Activity of an application is paused (its onPause() method is called), or stopped (its onStop() method is called), this method should be invoked to release the MediaPlayer object, unless the application has a special need to keep the object around.
       *
       * In addition to unnecessary resources (such as memory and instances of codecs) being held, failure to call this method immediately if a MediaPlayer object is no longer needed may also lead to continuous battery consumption for mobile devices, and playback failure for other applications if no multiple instances of the same codec are supported on a device. Even if multiple instances of the same codec are supported, some performance degradation may be expected when unnecessary multiple instances are used at the same time.
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer#release()
       *
       */
      release(): void;
      /**
       * @中文
       *
       * 等待播放完成
       *
       * @eng
       *
       * Wait for the music to be played
       *
       * @see https://developer.android.com/reference/android/media/MediaPlayer#setOnCompletionListener(android.media.MediaPlayer.OnCompletionListener)
       */
      awaitForCompletion(): Promise<void>;
      private onPrepared;
      private onSeeked;
      private resolveAll;
  }
  /**
   * @中文
   *
   * 扫描文件。用于将音乐文件加入媒体库，也可将图片加入系统相册。
   *
   * @param file 需要扫描的文件路径。
   *
   * @eng
   *
   * Scan file. Used to add music files to the media library, and to add images to the system album.
   *
   * @param file The file path to be scanned.
   *
   * @see https://developer.android.com/reference/android/media/MediaScannerConnection#scanFile(java.lang.String,%20java.lang.String)
   */
  export declare function scanFile(file: string): void;
  /**
   * @中文
   *
   * 播放音乐。在async函数中可使用await关键字等待播放完成。
   *
   * @param uri 音乐文件路径，或网址。
   * @param volume 播放音量，为0~1的浮点数，默认为1。
   * @param looping 是否循环播放，如果looping为true则循环播放，默认为false。
   *
   * @eng
   *
   * Play music. In 'async function' can be used keyword 'await' to wait for the music to be played.
   *
   * @param uri The music file path, or the URL.
   * @param volume The volume of the music, a float number between 0 and 1, default is 1.
   * @param looping Whether to loop the music, if looping is true, the music will be looped, default is false.
   *
   * @example
   * ```javascript
   * "nodejs";
   * const media = require("media");
   * const url = 'http://music.163.com/song/media/outer/url?id=1309394512.mp3';
   * playByUrl(url);
   * async function playByUrl(uri) {
   *   await media.playMusic(uri, 1.0, false);
   * }
   * ```
   */
  export declare function playMusic(uri: string, volume?: number, looping?: boolean): Promise<MediaPlayer>;
  

}
