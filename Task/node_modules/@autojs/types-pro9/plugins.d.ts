
declare module 'plugins' {

  /**
   * @中文
   *
   * 加载一个插件，并返回插件模块中module.exports导出的对象。
   *
   * 如果插件未安装或不存在，则抛出PluginLoadException异常。
   *
   * @param packageName 插件包名
   * @returns 插件导出对象
   *
   * @eng
   *
   * Load a plugin and return the module.exports object exported by the plugin.
   *
   * If the plugin is not installed or does not exist, throw a PluginLoadException.
   *
   * @param packageName plugin package name
   * @returns plugin exported object
   *
   * @example
   * ```javascript
   * "nodejs";
   * const plugins = require("plugins");
   * const ffmpeg = plugins.load("org.autojs.plugin.ffmpeg");
   * console.log(ffmpeg.inProcess.exec('-i /path/to/mp4.mp4 /path/to/mp3.mp3'));
   * ```
   */
  export declare function load(packageName: string): any;
  /**
   * @中文
   *
   * 卸载插件。卸载后继续使用之前的插件导出对象将导致未定义行为。
   *
   * @param packageName 插件包名
   * @returns 是否成功卸载插件
   *
   * @eng
   *
   * Unload a plugin. Using the plugin exported object is an undefined behavior after unloading.
   */
  export declare function unload(packageName: string): boolean;
  /**
   * @中文
   *
   * 卸载所有插件。卸载后继续使用之前的插件导出对象将导致未定义行为。
   *
   * @eng
   *
   * Unload all plugins. Using the plugin exported object is an undefined behavior after unloading.
   */
  export declare function unloadAll(): void;
  

}
