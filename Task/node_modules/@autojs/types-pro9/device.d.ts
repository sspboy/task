
declare module 'device' {

  /**
   * @中文
   *
   * device模块提供了与设备有关的信息与操作，例如获取设备宽高，内存使用率，设备ID，调整设备亮度、音量等。
   *
   * 此模块的部分函数，需要"修改系统设置"的权限。如果没有该权限，会抛出异常。
   *
   * 此模块的主要功能文档在{@link Device}和{@link OS}这两个类中。
   *
   * @eng
   *
   * The device module provides information and operations about the device, such as getting the device width and height, memory usage, device ID, adjust the brightness, volume, etc.
   *
   * Some functions of this module, need the "write system settings" permission. If the permission is not granted, an exception will be thrown.
   *
   * The main function document of this module is in {@link Device} and {@link OS} classes.
   *
   * @packageDocumentation
   */
  declare const EventEmitter: any;
  /**
   * @中文
   *
   * Android版本信息。
   *
   * @eng
   *
   * Android version information.
   */
  export interface AndroidVersion {
      /**
       * @中文
       *
       * 版本名称，比如 `4.4.2`, "12"。
       *
       * @eng
       *
       * Version name, such as `4.4.2`, "12".
       */
      readonly name: string;
      /**
       * @中文
       *
       * API版本，比如Android 10为29。
       *
       * @eng
       *
       * API version, such as Android 10 is 29.
       *
       */
      readonly code: number;
  }
  /**
   * @中文
   *
   * OS提供获取系统相关信息，比如系统版本号、版本名称。
   *
   * @eng
   *
   * OS provides system information, such as system version number and version name.
   *
   * @example
   * ```javascript
   * const { OS } = require('device');
   * console.log(OS.sdkName); // e.g. "7.1"
   * console.log(OS.sdkVersionCode); // e.g. 25
   * ```
   */
  export declare class OS {
      /**
       * Android 1.0
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_BASE: AndroidVersion;
      /**
       * Android 1.1
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_BASE_1_1: AndroidVersion;
      /**
       * Android 1.5
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_CUPCAKE: AndroidVersion;
      /**
       * Android 1.6
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_DONUT: AndroidVersion;
      /**
       * Android 2.0
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_ECLAIR: AndroidVersion;
      /**
       * Android 2.0.1
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_ECLAIR_0_1: AndroidVersion;
      /**
       * Android 2.1.x
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_ECLAIR_MR1: AndroidVersion;
      /**
       * Android 2.2.x
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_FROYO: AndroidVersion;
      /**
       * Android 2.3
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_GINGERBREAD: AndroidVersion;
      /**
       * Android 2.3.3
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_GINGERBREAD_MR1: AndroidVersion;
      /**
       * Android 3.0.x
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_HONEYCOMB: AndroidVersion;
      /**
       * Android 3.1.x
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_HONEYCOMB_MR1: AndroidVersion;
      /**
       * Android 3.2
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_HONEYCOMB_MR2: AndroidVersion;
      /**
       * Android 4.0
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_ICE_CREAM_SANDWICH: AndroidVersion;
      /**
       * Android 4.0.3
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_ICE_CREAM_SANDWICH_MR1: AndroidVersion;
      /**
       * Android 4.1
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_JELLY_BEAN: AndroidVersion;
      /**
       * Android 4.2
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_JELLY_BEAN_MR1: AndroidVersion;
      /**
       * Android 4.3
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_JELLY_BEAN_MR2: AndroidVersion;
      /**
       * Android 4.4.2
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_KITKAT: AndroidVersion;
      /**
       * Android 4.4W
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_KITKAT_WATCH: AndroidVersion;
      /**
       * Android 5.0
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_L: AndroidVersion;
      /**
       * Android 5.1
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_LOLLIPOP_MR1: AndroidVersion;
      /**
       * Android 6.0
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_M: AndroidVersion;
      /**
       * Android 7.0
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_N: AndroidVersion;
      /**
       * Android 7.1
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_N_MR1: AndroidVersion;
      /**
       * Android 8.0
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_O: AndroidVersion;
      /**
       * Android 8.1
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_O_MR1: AndroidVersion;
      /**
       * Android 9
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_P: AndroidVersion;
      /**
       * Android 10
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_Q: AndroidVersion;
      /**
       * Android 11
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_R: AndroidVersion;
      /**
       * Android 12
       *
       * @see {@link requiresAndroidVersion}
       */
      static readonly ANDROID_S: AndroidVersion;
      private static sdkVersions;
      private static _sdkVersionCode;
      private static _sdkName;
      private constructor();
      /**
       * @中文
       *
       * 获取当前系统的SDK版本号，即Android API版本号。例如Android 10为29，Android 7.0为24。完整的对应表参见[SDK Platform release notes](https://developer.android.com/studio/releases/platforms)。
       *
       * @eng
       *
       * Get the current system's SDK version, which is the Android API version. For example, Android 10 is 29, Android 7.0 is 24. The complete corresponding table can be found in [SDK Platform release notes](https://developer.android.com/studio/releases/platforms).
       *
       * @see https://developer.android.com/reference/android/os/Build.VERSION#SDK_INT
       */
      static get sdkVersionCode(): number;
      /**
       * @中文
       *
       * Android版本名称，例如"10"、"7.0"、"4.4W"等。对于比较新的Android版本，可能返回unknown。
       *
       * @eng
       *
       * Android version name, such as "10", "7.0", "4.4W". For a new Android version, it may return "unknown".
       */
      static get sdkName(): string;
      /**
       * @中文
       *
       * 系统源码版本控制的内部版本号，比如git的commit id。
       *
       * @eng
       *
       * The internal value used by the underlying source control to represent this build. E.g., a perforce changelist number or a git hash.
       *
       * @see https://developer.android.com/reference/android/os/Build.VERSION#INCREMENTAL
       */
      static get incremental(): string;
      /**
       * @中文
       *
       * 用户可见的版本字符串。 例如，“1.0”或“3.4b5”或“bananas”。不要假设它的值具有任何特定的结构，或者不同版本的 RELEASE 值可以以某种方式排序。
       *
       * @eng
       *
       * The user-visible version string. E.g., "1.0" or "3.4b5" or "bananas". This field is an opaque string. Do not assume that its value has any particular structure or that values of RELEASE from different releases can be somehow ordered.
       *
       * @see https://developer.android.com/reference/android/os/Build.VERSION#RELEASE
       */
      static get release(): string;
      /**
       * @中文
       *
       * 安全补丁的版本号。
       *
       * @eng
       *
       * The user-visible security patch level. This value represents the date when the device most recently applied a security patch.
       *
       * @see https://developer.android.com/reference/android/os/Build.VERSION#SECURITY_PATCH
       */
      static get securityPatch(): string;
      /**
       * @中文
       *
       * 要求最低在给定的Android版本中运行。如果当前系统版本小于给定版本，则抛出异常，异常信息为给定的message字段。
       *
       * @param version 最小Android版本
       * @param message 异常信息，默认为Requires Android ${version.name}(API ${version.code}) to run this code
       *
       * @eng
       *
       * Require running on the given Android version or higher. If the current system version is lower than the given version, then throw an exception with the given message.
       *
       * @param version The minimum Android version
       * @param message The exception message, default to ”Requires Android ${version.name}(API ${version.code}) to run this code“
       *
       * @example
       * ```javascript
       * "nodejs";
       *
       * const { OS } = require('device');
       * OS.requiresAndroidVersion(OS.ANDROID_N);
       * ```
       */
      static requiresAndroidVersion(version: AndroidVersion, message?: string): void;
  }
  /**
   * 音量类型，包括：
   * * `music`: 音乐(媒体)音量
   * * `alarm`: 闹钟音量
   * * `notification`: 通知音量
   * * `ring`: 铃声音量
   * * `voice_call`: 通话音量
   * * `system`: 系统音量
   * * `dtmf`: DTMF音量
   * * `accessibility`: 辅助功能音量
   */
  export declare type StreamType = 'music' | 'alarm' | 'notification' | "voice_call" | "system" | "ring" | "dtmf" | "accessibility";
  export interface StreamVolumeRange {
      min: number;
      max: number;
  }
  export declare type PluggedType = 'usb' | 'wireless' | 'ac';
  /**
   * 设备的显示相关信息。
   *
   * @see https://developer.android.com/reference/android/util/DisplayMetrics
   */
  export interface DisplayMetrics {
      /**
       * @中文
       *
       * 显示宽度，单位像素。
       *
       * @eng
       *
       * Display width, in pixels.
       */
      widthPixels: number;
      /**
       * @中文
       *
       * 显示高度，单位像素。
       *
       * @eng
       *
       * Display height, in pixels.
       */
      heightPixels: number;
      /**
       * @中文
       *
       * 显示器的逻辑密度。这是一个独立像素密度单位的比例系数，在大约160dpi的屏幕上，一个DIP就是一个像素（例如240x320，1.5 "x2 "屏幕），提供系统显示的基线。因此，在160dpi屏幕上，这个密度值将是1；在120dpi屏幕上，它将是0.75；等等。
       *
       * 这个值并不完全遵循真实的屏幕尺寸（由xdpi和ydpi给出），而是用来根据显示dpi的粗略变化，按步骤缩放整个UI的尺寸。例如，一个240x320的屏幕，即使其宽度为1.8"、1.3 "等，其密度也为1。然而，如果屏幕分辨率增加到320x480，但屏幕尺寸仍然是1.5 "x2"，那么密度将增加（可能是1.5）。
       *
       * @eng
       *
       * The logical density of the display. This is a scaling factor for the Density Independent Pixel unit, where one DIP is one pixel on an approximately 160 dpi screen (for example a 240x320, 1.5"x2" screen), providing the baseline of the system's display. Thus on a 160dpi screen this density value will be 1; on a 120 dpi screen it would be .75; etc.
       *
       * This value does not exactly follow the real screen size (as given by xdpi and ydpi), but rather is used to scale the size of the overall UI in steps based on gross changes in the display dpi. For example, a 240x320 screen will have a density of 1 even if its width is 1.8", 1.3", etc. However, if the screen resolution is increased to 320x480 but the screen size remained 1.5"x2" then the density would be increased (probably to 1.5).
       *
       * @see https://developer.android.com/reference/android/util/DisplayMetrics#density
       */
      density: number;
      /**
       * @中文
       *
       * 显示器上显示的字体的比例因子。这与密度相同，只是它可以在运行时根据用户对字体大小的偏好以较小的增量进行调整。
       *
       * @eng
       *
       * A scaling factor for fonts displayed on the display. This is the same as density, except that it may be adjusted in smaller increments at runtime based on a user preference for the font size.
       *
       * @see https://developer.android.com/reference/android/util/DisplayMetrics#scaledDensity
       */
      scaledDensity: number;
      /**
       *
       * @中文
       *
       * 屏幕中每英寸的像素数。
       *
       * @eng
       *
       * The screen density expressed as dots-per-inch.
       *
       * @see https://developer.android.com/reference/android/util/DisplayMetrics#densityDpi
       */
      densityDpi: number;
      /**
       * @中文
       *
       * 屏幕中x方向每英寸的像素数。
       *
       * @eng
       *
       * The screen density expressed as dots-per-inch in the X dimension.
       *
       * @see https://developer.android.com/reference/android/util/DisplayMetrics#xdpi
       *
       */
      xdpi: number;
      /**
       * @中文
       *
       * 屏幕中y方向每英寸的像素数。
       *
       * @eng
       *
       * The screen density expressed as dots-per-inch in the Y dimension.
       *
       * @see https://developer.android.com/reference/android/util/DisplayMetrics#ydpi
       *
       */
      ydpi: number;
  }
  export interface Product {
      /**
       * @中文
       *
       * 设备的产品名称。
       *
       * @eng
       *
       * The name of the overall product.
       *
       * @see https://developer.android.com/reference/android/os/Build.html#PRODUCT
       */
      name: string;
      /**
       * @中文
       *
       * 设备的工业设计名称。
       *
       * @eng
       *
       * The name of the industrial design.
       *
       * @see https://developer.android.com/reference/android/os/Build.html#DEVICE
       */
      device: string;
      /**
       * @中文
       *
       * 设备的主板名称。
       *
       * @eng
       *
       * The name of the underlying board, like "goldfish".
       *
       * @see https://developer.android.com/reference/android/os/Build.html#BOARD
       */
      board: string;
      /**
       * @中文
       *
       * 设备的产品名称。
       *
       * @eng
       *
       * The name of the overall product.
       *
       * @see https://developer.android.com/reference/android/os/Build.html#PRODUCT
       */
      brand: string;
      /**
       * @中文
       *
       * 设备型号。
       *
       * @eng
       *
       * The end-user-visible name for the end product.
       *
       * @see https://developer.android.com/reference/android/os/Build.html#MODEL
       */
      model: string;
  }
  /**
   * @中文
   *
   * 亮度模式，Manual为手动亮度，Automatic为自动亮度。
   *
   * @eng
   *
   * The brightness mode, Manual is for manual brightness, Automatic is for automatic brightness.
   *
   * @see https://developer.android.com/reference/android/provider/Settings.System#SCREEN_BRIGHTNESS_MODE_AUTOMATIC
   */
  export declare enum BrightnessMode {
      Manual = 0,
      Automatic = 1
  }
  /**
   * @中文
   *
   * 通过{@link Device.memoryInfo}获取的内存信息。
   *
   * @eng
   *
   * Information you can retrieve about the available memory through
   * {@link Device.memoryInfo}.
   */
  export interface MemoryInfo {
      /**
       * @中文
       *
       * 当前的系统可用内存，以字节为单位。
       *
       * @eng
       *
       * The available memory on the system.  This number should not
       * be considered absolute: due to the nature of the kernel, a significant
       * portion of this memory is actually in use and needed for the overall
       * system to run well.
       */
      availMem: number;
      /**
       * @中文
       *
       * 当前的系统总内存，以字节为单位。
       *
       * @eng
       *
       * The total memory accessible by the kernel.  This is basically the
       * RAM size of the device, not including below-kernel fixed allocations
       * like DMA buffers, RAM for the baseband CPU, etc.
       */
      totalMem: number;
      /**
       * @中文
       *
       * 当系统的可用内存达到此内存阈值时，被认为是低内存。
       *
       * @eng
       *
       * The threshold of {@link availMem} at which we consider memory to be
       * low and start killing background services and other non-extraneous
       * processes.
       */
      threshold: number;
      /**
       * 如果为true，则表示系统内存不足。
       *
       * @eng
       *
       * Set to true if the system considers itself to currently be in a low
       * memory situation.
       */
      lowMemory: boolean;
  }
  /**
   * @中文
   *
   * Device类提供获取设备状态、信息、调整设备亮度等方法。它是一个单例，只需要通过`const { device } = require('device')`即可获取实例。
   *
   * @eng
   *
   * Device class provides methods to get device status, information, adjust device brightness, etc. It is a singleton, you can get the instance by `const { device } = require('device')`.
   */
  export declare class Device extends EventEmitter {
      /**
       * @internal
       */
      static instance: Device;
      private context;
      private _receiver;
      private constructor();
      private get contentResolver();
      /**
       * @中文
       *
       * 设备的产品信息，包括产品名称、设备名称、设备板名、产品品牌、产品型号。
       *
       * @eng
       *
       * Device product information, including product name, device name, device board name, product brand, product model.
       *
       * @example
       * ```javascript
       * "nodejs";
       * const { device } = require('device');
       * console.log(device.product);
       * // {
       * //  name: 'mars',
       * //  device: 'mars',
       * //  board: 'mars',
       * //  brand: 'Xiaomi',
       * //  model: 'M2102K1AC'
       * // }
       * ```
       *
       * @see https://developer.android.com/reference/android/os/Build.html#PRODUCT
       */
      get product(): Product;
      /**
       * @中文
       *
       * 设备的唯一标识符。从Android10开始，应用可能没有权限获取到此值。
       *
       * @eng
       *
       * Gets the hardware serial number, if available.
       *
       * Starting with API level 29, persistent device identifiers are guarded behind additional restrictions, and apps are recommended to use resettable identifiers (see Best practices for unique identifiers). This method can be invoked if one of the following requirements is met:
       * * If the calling app has been granted the READ_PRIVILEGED_PHONE_STATE permission; this is a privileged permission that can only be granted to apps preloaded on the device.
       * * If the calling app has carrier privileges (see TelephonyManager.hasCarrierPrivileges()) on any active subscription.
       * * If the calling app is the default SMS role holder (see RoleManager.isRoleHeld(String)).
       * * If the calling app is the device owner of a fully-managed device, a profile owner of an organization-owned device, or their delegates (see DevicePolicyManager.getEnrollmentSpecificId()).
       *
       * If the calling app does not meet one of these requirements then this method will behave as follows:
       * * If the calling app's target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then Build#UNKNOWN is returned.
       * * If the calling app's target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission, or if the calling app is targeting API level 29 or higher, then a SecurityException is thrown.
       *
       * @see https://developer.android.com/reference/android/os/Build.html#getSerial()
       */
      get serial(): string;
      /**
       * @中文
       *
       * 设备支持的CPU架构的数组，比如`['arm64-v8a', 'armeabi-v7a']`。
       *
       * @eng
       *
       * An array of supported CPU architectures, such as `['arm64-v8a', 'armeabi-v7a']`.
       */
      get cpuApis(): Array<string>;
      /**
       * @中文
       *
       * 设备的构建ID。
       *
       * @eng
       *
       * Either a changelist number, or a label like "M4-rc20".
       *
       * @see https://developer.android.com/reference/android/os/Build.html#ID
       */
      get buildId(): string;
      /**
       * @中文
       *
       * 显示给用户的构建ID。
       *
       * @eng
       *
       * A build ID string meant for displaying to the user
       *
       * @see https://developer.android.com/reference/android/os/Build.html#DISPLAY
       */
      get display(): string;
      /**
       * @中文
       *
       * 系统Bootloader的版本号。
       *
       * @eng
       *
       * The system bootloader version number.
       *
       * @see https://developer.android.com/reference/android/os/Build.html#BOOTLOADER
       */
      get bootloader(): string;
      /**
       * @中文
       *
       * 硬件名称。
       *
       * @eng
       *
       * The name of the hardware (from the kernel command line or /proc).
       *
       * @see https://developer.android.com/reference/android/os/Build.html#HARDWARE
       */
      get hardware(): string;
      /**
       * @中文
       *
       * 构建的唯一标识字符串。
       *
       * @eng
       *
       * A string that uniquely identifies this build. Do not attempt to parse this value.
       *
       * @see https://developer.android.com/reference/android/os/Build.html#FINGERPRINT
       */
      get fingerprint(): string;
      /**
       * @中文
       *
       * 设备的IMEI。若无权限获取，可能抛出异常；从Android 10开始，应用不再有权限获取IMEI。
       *
       * @eng
       *
       * Returns the unique device ID, for example, the IMEI for GSM and the MEID or ESN for CDMA phones. Return null if device ID is not available.
       *
       * Starting with API level 29, applications are not allowed to access IMEI.
       *
       * @see https://developer.android.com/reference/android/telephony/TelephonyManager#getDeviceId()
       */
      get imei(): string | null;
      /**
       * @中文
       *
       * Android ID。
       *
       * @eng
       *
       * Android ID.
       *
       * @see https://developer.android.com/reference/android/provider/Settings.Secure#ANDROID_ID
       */
      get androidId(): string;
      /**
       * @中文
       *
       * 根据类型获取音量，比如获取媒体音量为`device.getVolume("music")`。
       *
       * @param type 音量类型，参见{@link StreamType}
       *
       * @eng
       *
       * Gets the volume for a particular stream type. For example, using `device.getVolume("music")` to get the current music volume.
       *
       * @param type The stream type whose volume should be returned. One of {@link StreamType}
       *
       */
      getVolume(type: StreamType): number;
      /**
       * @中文
       *
       * 设置音量，比如设置媒体音量为`device.setVolume("music", 10)`。
       *
       * @param type 音量类型，参见{@link StreamType}
       * @param volume 要设置的音量
       * @param flags 标志位，默认为空数组。比如`['SHOW_UI', 'PLAY_SOUND', 'VIBRATE']`表示调整音量时会弹出提示框，播放提示音，并震动。Flags可选的值参见[AudioManager](https://developer.android.com/reference/kotlin/android/media/AudioManager#FLAG_PLAY_SOUND)。
       *
       * @eng
       *
       * Sets the volume for a particular stream type. For example, `device.setVolume("music", 10)` to set the music volume to 10.
       *
       * @param type The stream type whose volume should be set. One of {@link StreamType}
       * @param volume The volume to set. This value must be in the range `0` to `maxVolume` inclusive.
       * @param flags Optional flags. For example, `['SHOW_UI', 'PLAY_SOUND', 'VIBRATE']` indicates that showing ui, playing sound and vibrating when adjusts volume. Flags can be any of the values in documentation of [AudioManager](https://developer.android.com/reference/kotlin/android/media/AudioManager#FLAG_PLAY_SOUND).
       */
      setVolume(type: StreamType, volume: number, flags?: Array<string>): void;
      /**
       * @中文
       *
       * 获取给定音量类型的音量范围，比如`{min: 0, max: 15}`。
       *
       * @param type 音量类型，参见{@link StreamType}
       *
       * @eng
       *
       * Gets the volume range for a particular stream type. e.g. `{min: 0, max: 15}`.
       *
       * @param type The stream type whose volume range should be returned. One of {@link StreamType}
       */
      getVolumeRange(type: StreamType): StreamVolumeRange;
      /**
       * @中文
       *
       * 设备的当前电量，为0~100之间的浮点数。
       *
       * @eng
       *
       * The current battery level of the device, as a float between 0.0 and 1.0.
       *
       * @example
       *
       * ```javascript
       * "nodejs";
       * const { device } = require('device');
       * console.log(device.battery);
       * ```
       */
      get battery(): number;
      /**
       * @中文
       *
       * 设备的屏幕宽度，单位为像素。
       *
       * @eng
       *
       * The width of the screen in pixels.
       */
      get screenWidth(): number;
      /**
       * @中文
       *
       * 设备的屏幕高度，单位为像素。
       *
       * @eng
       *
       * The height of the screen in pixels.
       */
      get screenHeight(): number;
      /**
       * @中文
       *
       * 设置的显示相关信息，比如宽度、高度、像素密度等。
       *
       * @eng
       *
       * The display related information, such as width, height, pixel density, etc.
       *
       * @see {@link DisplayMetrics}
       */
      get displayMetrics(): DisplayMetrics;
      private _getDisplayMetrics;
      private _getBatteryFromIntent;
      /**
       * @中文
       *
       * 设备当前连接的电源类型，例如`["usb"]`表示连接了USB电源，`["ac"]`表示连接了交流电源，`["wireless", "usb"]`表示同时连接了无线和USB电源。如果设备没有连接电源，则返回空数组。
       *
       * @eng
       *
       * The array of the types of power source which  the device is plugged in to, for example `["usb"]` means connected to USB power, `["ac"]` means connected to AC power. If the device is not connected to power, it returns an empty array.
       *
       * @example
       *
       * ```javascript
       * "nodejs";
       * const { device } = require('device');
       * console.log(device.batteryPluggedTypes);
       * ```
       */
      get batteryPluggedTypes(): Array<PluggedType>;
      private _getBatteryPluggedFromIntent;
      get macAddress(): string | null;
      private _getMacAddressByNetworkInterfaces;
      private _getMacAddressByConnectionInfo;
      private _onReceive;
      /**
       * @中文
       *
       * 设备的亮度，范围为0-255。
       *
       * ```javascript
       * "nodejs";
       *
       * const { device } = require("device");
       * // 打印当前的亮度
       * console.log(device.brightness);
       * // 设置亮度为255
       * device.brightness = 255;
       * ```
       *
       * @eng
       *
       * The brightness mode of the device.
       *
       * ```javascript
       * "nodejs";
       *
       * const { device } = require("device");
       * console.log(device.brightness);
       * // Set the brightness to 255
       * device.brightness = 255;
       * ```
       *
       * @see https://developer.android.com/reference/android/provider/Settings.System#SCREEN_BRIGHTNESS
       */
      get brightness(): number;
      set brightness(value: number);
      /**
       * @中文
       *
       * 设备的亮度模式。
       *
       * ```javascript
       * "nodejs";
       *
       * const { device, BrightnessMode } = require("device");
       * // 打印当前的亮度模式
       * console.log(device.brightnessMode);
       * // 设置亮度为自动亮度
       * device.brightnessMode = BrightnessMode.AUTOMATIC;
       * ```
       *
       * @eng
       *
       * The brightness mode of the device.
       *
       * ```javascript
       * "nodejs";
       *
       * const { device, BrightnessMode } = require("device");
       * console.log(device.brightnessMode);
       * // Set the brightness to automatic brightness
       * device.brightnessMode = BrightnessMode.AUTOMATIC;
       * ```
       *
       * @see https://developer.android.com/reference/android/provider/Settings.System#SCREEN_BRIGHTNESS_MODE
       */
      get brightnessMode(): BrightnessMode;
      set brightnessMode(value: BrightnessMode);
      private get activityManager();
      /**
       * @中文
       *
       * 获取当前设备的内存信息， 包括总内存、可用内存、是否低内存状态等。
       *
       * 内存单位为字节，即byte。
       *
       * @eng
       *
       * Return general information about the memory state of the system, including total memory, available memory, etc. This can be used to help decide how to manage your own memory.
       *
       * Memory units are bytes.
       *
       * @example
       * ```javascript
       * "nodejs";
       * const { device } = require('device');
       * console.log(`total memory: ${device.memoryInfo.totalMem / 1024 / 1024} MB`);
       * console.log(device.memoryInfo);
       * ```
       *
       * @see https://developer.android.com/reference/android/app/ActivityManager#getMemoryInfo(android.app.ActivityManager.MemoryInfo)
       */
      get memoryInfo(): MemoryInfo;
      /**
       * @中文
       *
       * 让设备震动一段时间，需要应用在前台时才能调用此函数。
       *
       * @param millis 震动时间，单位毫秒
       *
       * @eng
       *
       * Vibrate constantly for the specified period of time. The app should be in the foreground for the vibration to happen.
       *
       * @param millis Vibration time, in milliseconds
       *
       * @see https://developer.android.com/reference/android/os/Vibrator.html#vibrate(long)
       */
      vibrate(millis: number): void;
      /**
       * @中文
       *
       * 取消震动。
       *
       * @eng
       *
       * Turn the vibrator off.
       *
       * @see https://developer.android.com/reference/android/os/Vibrator.html#cancel()
       */
      cancelVibration(): void;
  }
  export declare const device: Device;
  export {};
  

}
