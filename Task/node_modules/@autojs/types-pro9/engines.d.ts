/// <reference types="node" />

declare module 'engines' {

  /**
   * @中文
   *
   * engines模块提供了获取自身引擎、运行参数、运行配置的方法，以及获取其他引擎、启动新引擎、控制其他引擎、和其他引擎通信的功能。
   *
   * @eng
   *
   * The engines module provides methods to get the current engine, arguments, and configuration of current engine, and functions to get other engines, start new engines, control other engines, and communicate with other engines.
   *
   * @packageDocumentation
   */
  import { EventEmitter } from "events";
  export interface ReadOnlyExecutionConfig {
      readonly workingDirectory: string;
      readonly path: Array<String>;
  }
  /**
   * @中文
   *
   * 脚本引擎对象，表示一次脚本或项目执行的引擎示例。可以通过引擎和跨脚本通信，获取引擎的状态，停止引擎运行等。
   *
   * @eng
   *
   * Script engine object, represents an engine instance of a script or project running. It can be used to communicate with other engines and scripts, get engine status, stop engine running, etc.
   */
  export interface ScriptEngine {
      /**
       * @中文
       *
       * 引擎的唯一id，不同引擎的id必不相同。
       *
       * @eng
       *
       * Unique id of engine, different from other engine's id.
       */
      readonly id: number;
      /**
       * @中文
       *
       * 引擎运行的所在目录。一般是项目的根目录或者脚本文件的父目录。
       *
       * @eng
       *
       * Directory of engine running. Usually is the root directory of project or the parent directory of script file.
       */
      readonly workingDirectory: string;
      /**
       * @中文
       *
       * 引擎源文件的对象。
       *
       * @eng
       *
       * Source file object of engine.
       */
      readonly source: any;
      /**
       * @中文
       *
       * 引擎的源文件路径。
       *
       * @eng
       *
       * Path of engine source file.
       */
      readonly sourceFile: string;
      /**
       * @中文
       *
       * 获取本次运行指定的运行配置。
       *
       * @eng
       *
       * Get the execution config of this engine.
       */
      readonly executionConfig: ReadOnlyExecutionConfig;
      /**
       * @中文
       *
       * 强制停止引擎运行。
       *
       * @eng
       *
       * Force stop the engine.
       */
      forceStop(): void;
      /**
       * Returns the tag associated with this engine and the specified key.
       */
      getTag(key: string): any;
      /**
       * @中文
       *
       * 发送事件给引擎。对于nodejs引擎，可以用`require("engines").myEngine().on("event_name", () => {})`来监听事件；对于pro8引擎，则可以用`$events.on("event_name", () => {})`来监听事件。
       *
       * @param event 事件名称
       * @param args 事件参数，必须是可以转换为JSON的数据
       *
       * @eng
       *
       * Send event to engine. For nodejs engine, you can use `require("engines").myEngine().on("event", () => {})` to listen event; For pro8 engine, you can use `$events.on("event", () => {})` to listen event.
       *
       * @param event Event name
       * @param args Event arguments, must be a JSON-able data
       */
      emit(event: string, ...args: any[]): void;
  }
  /**
   * @中文
   *
   * {@link execScriptFile}返回的对象。表示一次代码执行，记录执行的文件路径，可以监听其开始运行、停止运行事件，也可以获取执行引擎以便和其通信或停止引擎。
   *
   * @eng
   *
   * Object returned by {@link execScriptFile}. It represents a script execution, records the path of script file executed, can listen events of start and stop, and can get engine to communicate with it or stop engine.
   */
  export interface ScriptExecution extends EventEmitter {
      /**
       * @中文
       *
       * 开始执行事件。本事件代表本次执行需要的线程和引擎对象已创建好，正准备执行代码。
       *
       * @event start
       *
       * @eng
       *
       * The event of execution start. Once this event is sent, the thread and engine of the execution are ready and about to execute script.
       *
       * @event start
       */
      on(event: 'start', listener: (execution: ScriptExecution) => void): this;
      /**
       * @中文
       *
       * 执行成功事件。本事件代表脚本已执行成功。
       * @event success
       *
       * @eng
       *
       * The event of execution success. This event indicates that the script has been executed successfully.
       * @event success
       */
      on(event: 'success', listener: (execution: ScriptExecution) => void): this;
      /**
       * @中文
       *
       * 执行异常事件。本事件代表脚本执行过程遇到了未捕获的异常。
       * @event exception
       *
       * @eng
       * The event of execution exception. This event indicates an uncaught exception encountered during script execution.
       *
       * @event exception
       */
      on(event: 'exception', listener: (execution: ScriptExecution, exception: java.lang.Throwable) => void): this;
      /**
       * @中文
       *
       * 获取本次执行的引擎对象，如果引擎还没有准备好，则返回`null`。
       *
       * @eng
       *
       * Get the engine object of this execution, if engine is not ready, return `null`.
       */
      get engineOrNull(): ScriptEngine | null;
      /**
       * @中文
       *
       * 获取本次运行指定的运行配置。
       *
       * @eng
       *
       * Get the execution config of this execution.
       */
      get executionConfig(): ReadOnlyExecutionConfig;
      /**
       * @中文
       *
       * 运行的源文件的对象。
       *
       * @eng
       *
       * Source file object of engine.
       */
      readonly source: any;
      /**
       * @中文
       *
       * 运行的源文件路径。
       *
       * @eng
       *
       * Path of execution source file.
       */
      readonly sourceFile: string;
      /**
       * @中文
       *
       * 异步获取本次执行的引擎对象。
       *
       * @eng
       *
       * Get the engine object of this execution asynchronously.
       */
      engine(): any;
  }
  export interface EngineEventTarget {
      addListener(event: string, listener: (...args: any[]) => void): this;
      on(event: string, listener: (...args: any[]) => void): this;
      once(event: string, listener: (...args: any[]) => void): this;
      removeListener(event: string, listener: (...args: any[]) => void): this;
      off(event: string, listener: (...args: any[]) => void): this;
      removeAllListeners(event?: string): this;
      setMaxListeners(n: number): this;
      getMaxListeners(): number;
      listeners(event: string): Function[];
      rawListeners(event: string): Function[];
      listenerCount(event: string): number;
      prependListener(event: string, listener: (...args: any[]) => void): this;
      prependOnceListener(event: string, listener: (...args: any[]) => void): this;
      eventNames(): Array<string>;
  }
  /**
   * @中文
   *
   * 当前代码的自身引擎的对象。
   *
   * @eng
   *
   * Object of the engine that current script running with.
   */
  export interface SelfScriptEngine extends ScriptEngine, EngineEventTarget {
      /**
       * @中文
       *
       * 执行参数。包括其他脚本启动本引擎时指定的参数，或者定时任务触发时的参数。比如由定时任务触发，则参数为`{intent: ...}`。
       *
       * @eng
       *
       * Execution arguments. Includes arguments specified when starting engine, or arguments specified when triggering by work manager. For example, if triggered by intent task, the `execArgv` is `{intent: ...}`.
       */
      readonly execArgv: any;
      /**
       * @internal
       */
      readonly handler: android.os.Handler;
  }
  /**
   * @中文
   *
   * 获取当前运行的自身引擎的对象。
   *
   * @eng
   *
   * Get the engine object of the engine that current script running with.
   */
  export declare function myEngine(): SelfScriptEngine;
  /**
   * @中文
   *
   * 运行配置。用于启动新的引擎执行脚本或项目时，指定其运行目录、运行参数等。
   *
   * @eng
   *
   * Execution configuration. Used to specify the working directory, execution arguments when starting a new engine to run a script or a project.
   */
  export interface ExecutionConfig {
      /**
       * @中文
       *
       * 工作目录。默认为脚本的父目录或项目的根目录。其值会决定脚本执行时的相对路径等。
       *
       * @eng
       *
       * Working directory. Default is the parent directory of the script or the root directory of the project. The value will determine the relative path when executing the script, etc.
       */
      workingDirectory?: string;
      /**
       * @中文
       *
       * 脚本的require()时的搜索路径。类似于[module.paths](https://nodejs.org/docs/latest-v16.x/api/modules.html#modulepaths)。
       *
       * 该值暂时对Node.js引擎无效。
       *
       * @eng
       *
       * The require() search paths when executing the script. Similar to [module.paths](https://nodejs.org/docs/latest-v16.x/api/modules.html#modulepaths).
       *
       * This value is currently invalid for Node.js engine.
       *
       */
      path?: Array<string>;
      /**
       * @中文
       *
       * 执行参数。该参数可以通过`execArgv`属性获取。参数必须是可序列化（可转换为JSON）的对象。
       *
       * @eng
       *
       * Execution arguments. The value can be obtained by `execArgv` property. The arguments must be serializable (can be converted to JSON).
       */
      arguments?: any;
  }
  /**
   * @中文
   *
   * 启动新引擎执行脚本或项目。执行的脚本上下文和环境将和当前执行无关，也无法共享变量。可以通过事件或广播在脚本间通信。
   *
   * @param file 脚本或项目路径
   * @param config 运行配置
   * @returns 脚本执行对象，可以用来获取引擎状态、通信、控制引擎等
   *
   * @eng
   *
   * Start a new engine to run a script or a project. The script context and environment will be independent from the current context and environment. The script can communicate with other scripts by events or broadcasts.
   *
   * @param file Script or project path
   * @param config Execution configuration
   * @returns Script execution object. It can be used to get engine status, communicate with other scripts, and control the engine.
   */
  export declare function execScriptFile(file: string, config?: ExecutionConfig): ScriptExecution;
  /**
   * @中文
   *
   * 发送引擎间广播，相当于向所有引擎发送同一事件。
   *
   * @param event 事件名称
   * @param args 事件参数，必须是可序列化数据（可以转换为JSON）
   *
   * @eng
   *
   * Send a broadcast to all engines. It is equivalent to sending the same event to all engines.
   *
   * @param event Event name
   * @param args Event arguments, must be serializable (can be converted to JSON)
   */
  export declare function broadcast(event: string, ...args: any[]): void;
  /**
   * @中文
   *
   * 获取当前正在运行的所有引擎。
   *
   * @returns 当前运行的引擎数组
   *
   * @eng
   *
   * Get all current running engines.
   *
   * @returns Array of current running engines
   */
  export declare function getRunningEngines(): Array<ScriptEngine>;
  export interface StopAllOptions {
      /**
       * 停止所有引擎运行时是否显示Toast提示。默认为false。
       */
      toast?: boolean;
  }
  /**
   * @中文
   *
   * 停止所有引擎运行。
   *
   * @eng
   *
   * Stop all engines.
   *
   * @param options 停止所有引擎的选项
   */
  export declare function stopAll(options?: StopAllOptions): void;
  

}
