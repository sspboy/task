/// <reference types="node" />

declare module 'ui/web' {

  import EventEmitter from "events";
  export interface WebActivityArgs {
      readonly initialUrl?: string;
      readonly title?: string;
      readonly statusBarColor?: string;
      readonly intentFlags?: number;
  }
  export interface IPCEvent {
      readonly name: string;
  }
  export interface InvokeEvent {
      readonly channel: string;
      readonly arguments: Array<any>;
  }
  export declare type InvokeRequestHandler = (event: InvokeEvent, ...args: any) => any | Promise<any>;
  export interface JavaScriptBridge extends EventEmitter {
      eval(code: string): Promise<any>;
      handle(action: string | null | undefined, handler: InvokeRequestHandler): this;
      invoke(channel: string, ...args: any): Promise<any>;
      send(event: string, ...args: any): void;
      on(event: string, listener: ((event: IPCEvent, ...args: any) => void)): this;
  }
  export interface JsWebView extends android.webkit.WebView {
      readonly jsBridge: JavaScriptBridge;
      addListener(event: string | symbol, listener: (...args: any[]) => void): this;
      on(event: string | symbol, listener: (...args: any[]) => void): this;
      once(event: string | symbol, listener: (...args: any[]) => void): this;
      removeListener(event: string | symbol, listener: (...args: any[]) => void): this;
      off(event: string | symbol, listener: (...args: any[]) => void): this;
      removeAllListeners(event?: string | symbol): this;
      setMaxListeners(n: number): this;
      getMaxListeners(): number;
      listeners(event: string | symbol): Function[];
      rawListeners(event: string | symbol): Function[];
      emit(event: string | symbol, ...args: any[]): boolean;
      listenerCount(event: string | symbol): number;
      prependListener(event: string | symbol, listener: (...args: any[]) => void): this;
      prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;
      eventNames(): Array<string | symbol>;
  }
  

}
