/// <reference types="node" />

declare module 'notification' {

  import EventEmitter from "events";
  declare type AndroidNotification = android.app.Notification;
  declare type VoidFunction = () => void;
  export interface NotificationAction {
      title: string;
      onClick?: VoidFunction;
  }
  /**
   * @中文
   *
   * 创建通知的选项，包括通知标题、通知内容、通知图标、通知点击后的行为、按钮等。
   *
   * @eng
   *
   * Create notification options, including notification title, content, icon, action, button, etc.
   *
   * @see {@link buildNotification}
   */
  export interface BuildNotificationOptions {
      /**
       * ticker用于在状态栏显示通知信息
       */
      ticker?: string;
      /**
       * 内容
       */
      contentTitle?: string;
      contentText?: string;
      onContentClick?: VoidFunction;
      actions?: Array<NotificationAction>;
      autoCancel?: boolean;
      onDelete?: VoidFunction;
      ongoing?: boolean;
      silent?: boolean;
  }
  export declare function buildNotification(n: BuildNotificationOptions): AndroidNotification;
  export declare function notify(id: number, n: BuildNotificationOptions): void;
  export declare function cancel(id: number): void;
  export interface RequestListeningNotificationsOptions {
      toast?: boolean | string;
      goToSettings?: boolean;
  }
  export interface NotificationListenerService extends EventEmitter {
      on(event: 'notification', listener: (n: NotificationEvent) => void): this;
      disable(): void;
  }
  export interface NotificationEvent extends android.app.Notification {
      getText(): string | null;
      getTitle(): string | null;
      getPackageName(): string;
      delete(): boolean;
      click(): void;
  }
  export declare function requestListeningNotifications(options?: RequestListeningNotificationsOptions): Promise<NotificationListenerService>;
  export declare function goToNotificationListenerSettings(): void;
  export {};
  

}
