
declare module 'root_automator' {

  /**
   * @中文
   *
   * RootAutomator是一个使用root权限或adb权限来模拟触摸的对象，用它可以完成触摸与多点触摸，并且这些动作的执行没有延迟。相比起基于无障碍的操作，RootAutomator支持多点触控和动态改变手势，但可能兼容性不佳。
   *
   * @eng
   *
   * RootAutomator is an object that uses root or adb permissions to simulate touch. It can be used to complete touch and multi-touch, and the execution of these actions is not delayed. Compared to accessibility-based operations, RootAutomator supports multi-touch and dynamically changing gestures, but may not be compatible with all devices.
   *
   * @packageDocumentation
   */
  import { ShellOptions } from "./shell";
  /**
   * @中文
   *
   * 创建RootAutomator的选项，包括是否使用root权限、adb权限，或者显式指定输入设备。
   *
   * @eng
   *
   * Create RootAutomator options, including whether to use root permission, adb permission, or explicit input device.
   *
   * @see {@link createRootAutomator}
   */
  export interface RootAutomatorOptions extends ShellOptions {
      /**
       * @中文
       *
       * 触摸输入设备的路径，比如/dev/input/event5。
       *
       * @eng
       *
       * Input device path, such as /dev/input/event5.
       */
      inputDevice?: string;
  }
  /**
   * @中文
   *
   * RootAutomator用于基于root或者adb权限，模拟点击、手势、长按等操作。相比起基于无障碍的操作，RootAutomator支持多点触控和动态改变手势，但可能兼容性不佳。
   *
   * @eng
   *
   * RootAutomator is used to simulate click, gesture, and long press operations based on root or adb permission. Compared to the operation based on accessibility, RootAutomator supports multiple-touch and dynamic gesture, but may not be compatible with all devices.
   */
  export interface RootAutomator {
      sendEvent(type: number, code: number, value: number): void;
      syncReport(): void;
      touch(x: number, y: number): void;
      touchX(x: number): void;
      touchY(y: number): void;
      sendSync(): void;
      /**
       * @中文
       *
       * 点击位置(x, y)，时长为5毫秒。
       *
       * @param id 手指ID，默认为0
       * @returns 返回一个Promise对象，当操作完成时，Promise对象会被resolve。
       *
       * @eng
       *
       * Click position (x, y), duration is 5 milliseconds.
       *
       * @param id Finger ID, default is 0
       * @returns A Promise object, which will be resolved when the operation is completed.
       */
      tap(x: number, y: number, id?: number): Promise<void>;
      /**
       * @中文
       *
       * 在给定的duration时长从(x1, y1)位置滑动到(x2, y2)位置。
       *
       * @param duration 滑动时长，单位毫秒
       * @param id 手指ID，默认为0
       * @param sampleMs 滑动点采样时间，单位毫秒，默认为8毫秒
       * @returns 返回一个Promise对象，当操作完成时，Promise对象会被resolve。
       *
       * @eng
       *
       * Swipe from (x1, y1) to (x2, y2) position on the given duration.
       *
       * @param duration Swipe duration, unit is milliseconds
       * @param id Finger ID, default is 0
       * @param sampleMs Swipe point sampling time, unit is milliseconds, default is 8 milliseconds
       * @returns A Promise object, which will be resolved when the operation is completed.
       *
       */
      swipe(x1: number, y1: number, x2: number, y2: number, duration: number, id?: number, sampleMs?: number): Promise<void>;
      /**
       * @中文
       *
       * 按下(x, y)位置持续duration时长，然后抬起手指。
       *
       * @param duration 按下时长，单位毫秒
       * @param id 手指ID，默认为0
       * @returns 返回一个Promise对象，当操作完成时，Promise对象会被resolve。
       *
       * @eng
       *
       * Press on (x, y) position for the given duration, then lift the finger.
       *
       * @param duration Press duration, unit is milliseconds
       * @param id Finger ID, default is 0
       * @returns A Promise object, which will be resolved when the operation is completed.
       *
       */
      press(x: number, y: number, duration: number, id?: number): Promise<void>;
      /**
       * @中文
       *
       * 长按(x, y)位置。长按的时长为[ViewConfiguration.getLongPressTimeout()](https://developer.android.com/reference/android/view/ViewConfiguration.html#getLongPressTimeout())+100毫秒。
       *
       * @param id 手指ID，默认为0
       * @returns 返回一个Promise对象，当操作完成时，Promise对象会被resolve。
       *
       * @eng
       *
       * Long press on (x, y) position. The duration of long press is [ViewConfiguration.getLongPressTimeout()](https://developer.android.com/reference/android/view/ViewConfiguration.html#getLongPressTimeout())+100 milliseconds.
       *
       * @param id Finger ID, default is 0
       * @returns A Promise object, which will be resolved when the operation is completed.
       *
       */
      longPress(x: number, y: number, id?: number): Promise<void>;
      /**
       * @中文
       *
       * 按下(x, y)位置。
       *
       * @param id 手指ID，默认为0
       *
       * @eng
       *
       * Touch down on (x, y) position.
       *
       * @param id Finger ID, default is 0
       */
      touchDown(x: number, y: number, id?: number): void;
      /**
       * @中文
       *
       * 抬起手指。
       *
       * @param id 手指ID，默认为0
       *
       * @eng
       *
       * Touch up.
       *
       * @param id Finger ID, default is 0
       */
      touchUp(id?: number): void;
      /**
       * @中文
       *
       * 将手指移动到(x, y)位置。
       *
       * @param id 手指ID，默认为0
       *
       * @eng
       *
       * Move finger to (x, y) position.
       *
       * @param id Finger ID, default is 0
       */
      touchMove(x: number, y: number, id?: number): void;
      /**
       * @中文
       *
       * 退出RootAutomator。
       *
       * @param forcedly 如果为true，则会强制杀死进程并中断操作；如果为false，在会当前操作结束后退出进程。
       * @returns 返回一个Promise对象，在退出完成后resolve
       *
       * @eng
       *
       * Exit RootAutomator.
       *
       * @param forcedly If true, the process will be forcibly killed and the operation will be interrupted; if false, the process will be exited after the current operation ends.
       * @returns A Promise object, which will be resolved when the operation is completed.
       */
      exit(forcedly?: boolean): Promise<void>;
  }
  /**
   * @中文
   *
   * 根据选项创建一个新的RootAutomator实例。
   *
   * 可以指定是否使用root权限、adb权限、输入设备路径等，参见{@link RootAutomatorOptions}。如果不指定root或adb权限，则默认用{@link getDefaultShellOptions}获取的默认值。
   *
   * 对于输入设备路径`inputDevice`，如果不指定，则会自动检测，但检测失败时会抛出异常；你也可以手动在终端运行`getevent -t`，然后在屏幕上操作，看输入事件的设备路径是什么，比如`/dev/input/event5`。
   *
   * @param options 创建RootAutomator的选项
   *
   * @eng
   *
   * Create a new RootAutomator instance.
   *
   * You can specify whether to use root permission, adb permission, input device path, etc, see {@link RootAutomatorOptions}. If you don't specify root or adb permission, the default value from {@link getDefaultShellOptions} will be used.
   *
   * For input device path `inputDevice`, if you don't specify, it will be automatically detected, but if it fails to detect, it will throw an exception. You can run `getevent -t` in terminal, then move your finger on the screen, and see the input device path, like `/dev/input/event5`.
   *
   * @param options Create RootAutomator options
   *
   * @example
   * ```javascript
   * "nodejs";
   * const { createRootAutomator } = require("root_automator");
   * async function main() {
   *     const ra = await createRootAutomator({root: true});
   *     await ra.tap(100, 100);
   *     await ra.exit();
   * }
   * main();
   * ```
   */
  export declare function createRootAutomator(options?: RootAutomatorOptions): Promise<RootAutomator>;
  

}
