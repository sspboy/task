
declare module 'media_projection' {

  /**
   * @中文
   *
   * 此模块用于请求截图权限，获取截图和监听截图事件。
   *
   * @eng
   *
   * This module can request screen capture permission, get screen capture and listen screen capture events.
   *
   * @see {@link Image}
   *
   * @packageDocumentation
   */
  /// <reference types="node" />
  import { EventEmitter } from 'events';
  import { Image } from './image';
  export declare class ScreenCaptureRequestError extends Error {
      constructor(message: string);
  }
  export declare class ImageUnavailableError extends Error {
      constructor(message: string);
  }
  /**
   * @中文
   *
   * 截图方向。
   *
   * @eng
   *
   * Screen capture orientation.
   */
  export declare enum Orientation {
      /**
       * @中文
       *
       * 当前屏幕方向，也即请求截图权限时，设备的屏幕方向。
       *
       * @eng
       *
       * Current screen orientation, which is the screen orientation of the device when requesting screen capture permission.
       */
      CURRENT = 0,
      /**
       * @中文
       *
       * 根据设备方向动态调整截图方向。
       *
       * @eng
       *
       * Adjust screen capture orientation dynamically and automatically according to device orientation.
       */
      AUTO = 1,
      /**
       * @中文
       *
       * 横屏截图。
       *
       * @eng
       *
       * Landscape screen capture.
       */
      LANDSCAPE = 2,
      /**
       * @中文
       *
       * 竖屏截图。
       *
       * @eng
       *
       * Portrait screen capture.
       */
      PORTRAIT = 3
  }
  /**
   * @中文
   *
   * 截图选项。
   *
   * @eng
   *
   * Screen capture options.
   *
   * @see {@link requestScreenCapture}
   */
  export interface ScreenCaptureOptions {
      /**
       * @中文
       *
       * 截图的宽度。默认为屏幕宽度。
       *
       * @eng
       *
       * Screen capture width. Default is screen width.
       */
      width?: number;
      /**
       * @中文
       *
       * 截图的高度。默认为屏幕高度。
       *
       * @eng
       *
       * Screen capture height. Default is screen height.
       */
      height?: number;
      /**
       * @中文
       *
       * 截图的像素密度(dpi)。默认为屏幕像素密度。
       *
       * @eng
       *
       * Screen capture density. Default is screen density.
       *
       */
      density?: number;
      /**
       * @中文
       *
       * 截图的方向。默认为{@link Orientation.AUTO}，即自动调整屏幕方向。
       *
       * @eng
       *
       * Screen capture orientation. Default is {@link Orientation.AUTO}, which means adjust screen orientation automatically.
       */
      orientation?: Orientation;
      /**
       * @see [VIRTUAL_DISPLAY_FLAGS](https://developer.android.com/reference/android/hardware/display/DisplayManager#VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR)
       */
      virtualDisplayFlags?: number;
  }
  export declare interface ScreenCapturer {
      /**
       * @中文
       *
       * 有新的截图时触发的事件。
       *
       * @eng
       *
       * The event that triggered on new screen capture available.
       */
      on(event: 'image_available', listener: () => void): this;
  }
  export declare class ScreenCapturer extends EventEmitter {
      private mediaProjection;
      private options?;
      private _image?;
      private _imageOutdated;
      private imageAvailable;
      private onExit;
      /**
       * @internal
       */
      constructor(mediaProjection: JavaObject, options: ScreenCaptureOptions);
      /**
       * @中文
       *
       * 获取当前最新的截图图片对象。如果当前没有截图，则会抛出{@link ImageUnavailableError}。
       *
       * @eng
       *
       * Get the latest image of screen capturing. If there is no image available, it will throw {@link ImageUnavailableError}.
       */
      latestImage(): Image;
      /**
       * @中文
       *
       * 获取当前最新的截图图片对象。如果当前没有截图，则会返回null。
       *
       * @eng
       *
       * Get the latest image of screen capturing. If there is no image available, returns null.
       */
      latestImageOrNull(): Image | null;
      /**
       * @中文
       *
       * 等待下一张截图并返回。
       *
       * @eng
       *
       * Wait for the next screen capture and return.
       *
       */
      nextImage(): Promise<Image>;
      /**
       * @中文
       *
       * 等待有截图可用。仅在刚申请到截图权限，未有任何截图可用时，会等待有第一张截图到来。在第一张截图到来的任何时刻调用，会立即返回。
       *
       * @eng
       *
       * Wait for the first screenshot to be available. Called anytime the first screenshot arrives, it will return immediately.
       */
      awaitForImageAvailable(): Promise<void>;
      /**
       * @中文
       *
       * 停止截图。
       *
       * @eng
       *
       * Stop screen capturing.
       */
      stop(): void;
      private refreshVirtualDisplay;
      private initVirtualDisplay;
      private getVirtualDisplayConfig;
      private getOrientationAwareMetrics;
      /**
       * @internal
       */
      static fromIntent(data: JavaObject, options: ScreenCaptureOptions): ScreenCapturer;
  }
  /**
   * @中文
   *
   * 请求截图权限，并返回{@link ScreenCapturer}对象的Promise。如果用户拒绝或遇到错误，则会抛出一个{@link ScreenCaptureRequestError}。
   *
   * 请求截图权限需要启动新的Activity，因此在Android 10及以上，只有应用在前台时才能申请，并且截图期间需要保持前台服务运行，否则会无法收到新截图。
   *
   * @param options 截图选项
   * @param context 用于启动请求截图权限的Activity的Context，一般无需此参数
   * @returns
   *
   * @eng
   *
   * Request for screen capturing, and return a Promise of {@link ScreenCapturer}. If user rejects or encounters an error, it will throw a {@link ScreenCaptureRequestError}.
   *
   * Request for screen capturing needs to start a new Activity, so that on Android 10 and higher, only the app is in the foreground can request. And the app must keep the foreground service running while capturing, otherwise it will not receive new images.
   *
   * @param options Screen capturing options
   * @param context Context for starting the request for screen capturing, usually no need to pass this parameter
   * @returns
   *
   * @example
   * ```javascript
   * "nodejs";
   * const { requestScreenCapture } = require("media_projection");
   *
   * async function main() {
   *   const capturer = await requestScreenCapture();
   *   const img = await capturer.nextImage();
   *   console.log(img);
   * }
   * main();
   * ```
   */
  export declare function requestScreenCapture(options?: ScreenCaptureOptions, context?: android.content.Context): Promise<ScreenCapturer>;
  

}
