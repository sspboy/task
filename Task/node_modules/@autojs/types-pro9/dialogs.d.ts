/// <reference types="node" />

declare module 'dialogs' {

  /**
   * @中文
   * dialogs模块用于显示弹框，一般用于提示用户关键信息、输入信息，完成简易的交互。
   *
   * 本模块提供了多种配置模式，能够以应用内弹窗或悬浮窗形式显示确认框、输入框、单选框、多选框等，也可以自定义弹出框显示的View。
   *
   * 可使用`const dialogs = require('dialogs');`导入dialogs模块。然后通过比如`dialogs.showInputDialog("输入框标题", "输入框默认文本");`的方式调用模块中的方法。
   *
   * 也可以直接导入要使用的函数，比如`const { showInputDialog } = require('dialogs'); showInputDialog("输入框标题", "输入框默认文本");`。
   *
   * @eng
   * dialogs module is used to show dialogs, which is usually used to show user key information, input information, and complete simple interaction.
   *
   * This module provides multiple configuration modes, which can be displayed in the application dialog or floating window, confirm dialog, input box, radio button, and so on.
   *
   * You can use `const dialogs = require('dialogs');` to import dialogs module. Then you can use `dialogs.showInputDialog("Title", "Text");` to call the module's method.
   *
   * You can also directly import the function you want to use, such as `const { showInputDialog } = require('dialogs'); showInputDialog("Title", "Text");`
   *
   * @packageDocumentation
   */
  import EventEmitter from "events";
  import { Color } from "./color";
  import { Image } from "./image";
  /**
   * @中文
   * 显示一个确认对话框，包括一个确认按钮和一个取消按钮。
   *
   * @param title 确认对话框的标题。
   * @param properties 对话框的额外配置属性。参考 {@link DialogProperties}
   * @returns 可通过await获取弹出框选择结果。
   *
   * @eng
   * Show a confirm dialog, including a confirm button and a cancel button.
   *
   * @param title The title of the confirm dialog.
   * @param properties The extra configuration properties of the dialog. See {@link DialogProperties}
   * @returns The result of the dialog. You can use await to get the result.
   *
   * @example
   * ```javascript
   * "nodejs";
   * const dialogs = require('dialogs');
   * async function confirm() {
   *   const sure = await dialogs.showConfirmDialog("Are you sure?");
   *   console.log(sure); // true or false
   *   console.log(await dialogs.showConfirmDialog("Are you sure?", { positive: "Yes", negative: "No" }));
   * }
   * confirm();
   * ```
   */
  export declare function showConfirmDialog(title: string, properties?: DialogProperties): Promise<boolean>;
  /**
   * @中文
   * 显示一个提示对话框。提示对话框包括标题、内容和一个确认按钮。
   *
   * @param title 对话框的标题。
   * @param properties 对话框的配置属性。参考 {@link DialogProperties}
   * @returns 可通过await等待弹出框消失。
   *
   * @eng
   * Show a alert dialog. Alert dialog includes title, content and a confirm button.
   *
   * @param title The title of the dialog.
   * @param properties The configuration properties of the dialog. See {@link DialogProperties}
   * @returns The result of the dialog. You can use await to wait for the dialog to dismiss.
   *
   * @example
   * ```javascript
   * "nodejs";
   * const { showAlertDialog } = require('dialogs');
   * async function alert() {
   *   await showAlertDialog("This is an alert dialog.");
   *   await showAlertDialog("Summary", { content: "Some description" });
   * }
   * alert();
   * ```
   */
  export declare function showAlertDialog(title: string, properties?: DialogProperties): Promise<void>;
  /**
   * @中文
   * 显示一个输入对话框。
   *
   * @param title 输入对话框的标题。
   * @param prefill 输入对话框的默认文本。
   * @param properties 对话框的配置属性。参考 {@link DialogProperties}
   * @returns 可通过await获取弹出输入框的输入结果。若用户取消了输入，则返回null的Promise。
   *
   * @eng
   * show a input dialog.
   *
   * @param title The title of the input dialog.
   * @param prefill The default text of the input dialog.
   * @param properties The configuration properties of the dialog. See {@link DialogProperties}
   * @returns The promise of the input result. If the user cancels the input, the result will be null.
   *
   * @example
   * ```javascript
   * "nodejs";
   * const dialogs = require('dialogs');
   * async function inputDialog() {
   *   const name = await dialogs.showInputDialog("Input your name", "Tony");
   *   if (name != "") {
   *       console.log(`hello, ${mName}`);
   *   }
   * }
   * inputDialog();
   * ```
   */
  export declare function showInputDialog(title: string, prefill?: string, properties?: DialogProperties): Promise<string | null>;
  /**
   * @中文
   * 显示一个选择对话框。选择对话框包括标题和一个选择列表，用户点击列表项后会返回点击的结果。
   *
   * @param title 选择对话框的标题。
   * @param items 选择框的选项。
   * @param properties 对话框的配置属性。参考 {@link DialogProperties}
   * @returns 选择选项的索引的Promise，若用户取消了选择，则返回-1。索引从0开始。
   *
   * @eng
   * Show a select dialog.
   *
   * @param title The title of the select dialog.
   * @param items The options of the select dialog.
   * @param properties The configuration properties of the dialog. See {@link DialogProperties}
   * @returns The promise of the selected index. If the user cancels the select, the result will be -1.
   *
   *
   * @example
   * ```javascript
   * "nodejs";
   * const { showSelectDialog } = require('dialogs');
   * async function select() {
   *   const i = await showSelectDialog("Select an item", ["item1", "item2", "item3"]);
   *   console.log(`selected item: ${i}`);
   * }
   * select();
   * ```
   *
   */
  export declare function showSelectDialog(title: string, items: Array<string>, properties?: DialogProperties): Promise<number>;
  /**
   * @中文
   * 显示一个单选对话框。单选对话框包括标题和一个单选列表，用户点击列表项并确定后会返回点击的结果。
   *
   * @param title 单选对话框的标题。
   * @param items 单选框的选项。
   * @param initialSelectedIndex 默认选中的`items`数组索引序。
   * @param properties 对话框的配置属性。参考 {@link DialogProperties}
   * @returns 选择选项的索引的Promise，若用户取消了选择，则返回-1。索引从0开始。
   *
   * @eng
   * Show a radio dialog.
   *
   * @param title The title of the radio dialog.
   * @param items The options of the radio dialog.
   * @param initialSelectedIndex The default selected index of the `items` array.
   * @param properties The configuration properties of the dialog. See {@link DialogProperties}
   * @returns The promise of the selected index. If the user cancels the radio, the result will be -1.
   *
   *
   * @example
   * ```javascript
   * "nodejs";
   * const { showSingleChoiceDialog } = require('dialogs');
   * async function singleChoice() {
   *   const i = await showSingleChoiceDialog("Choose an item", ["item1", "item2", "item3"]);
   *   console.log(`selected item: ${i}`);
   * }
   * singleChoice();
   * ```
   */
  export declare function showSingleChoiceDialog(title: string, items: Array<string>, initialSelectedIndex?: number, properties?: DialogProperties): Promise<number>;
  /**
   * @中文
   * 显示一个多选对话框。多选对话框包括标题和一个多选列表，用户选择列表项并确定后会返回点击的结果。
   *
   * @param title 多选对话框的标题。
   * @param items 多选框的选项。
   * @param initialSelectedIndices 默认选中的选项，比如`[0, 2]`表示选中第一项和第三项。
   * @param properties 对话框的配置属性。参考 {@link DialogProperties}
   * @returns 选中选项的索引的数组Promise，若用户取消了选择，则返回空数组。索引从0开始。
   *
   * @eng
   * Show a multi-choice dialog. Multi-choice dialog includes a title and a multi-choice list, and the user clicks on the list items to confirm.
   *
   * @param title The title of the multi-choice dialog.
   * @param items The options of the multi-choice dialog.
   * @param initialSelectedIndices The default selected options. The form is an array of the index of `items` array.
   * @param properties The configuration properties of the dialog. See {@link DialogProperties}
   * @returns The promise of the selected indices. If the user cancels the multi-choice, the result will be an empty array.
   *
   * ```javascript
   * "nodejs";
   * const { showMultiChoiceDialog } = require('dialogs');
   * async function multiChoice() {
   *     const indices = await showMultiChoiceDialog("Choose items", ["item1", "item2", "item3"]);
   *     console.log(`selected items: ${indices}`);
   * }
   * ```
   *
   */
  export declare function showMultiChoiceDialog(title: string, items: Array<string>, initialSelectedIndices?: Array<number>, properties?: DialogProperties): Promise<Array<number> | null>;
  /**
   * @中文
   * 弹出对话框的类型。
   *
   * * `overlay`: 可显示在其他应用上方，需要悬浮窗权限。
   * * `app`: 应用内对话框，仅可在应用内的当前界面（Activity）显示，不需要额外权限。
   *
   * @eng
   * The type of the dialog.
   *
   * * overlay: can be shown on other applications, need floating window permission.
   * * app: application-level dialog, can only be shown in the current activity, no extra permission required.
   *
   */
  export declare type DialogType = "overlay" | "app";
  /**
   * @中文
   * 对话框的配置属性。
   *
   * @eng
   * The configuration properties of the dialog.
   *
   * @see {@link buildDialog}
   *
   */
  export interface DialogProperties {
      /**
       * @中文
       * 对话框的标题。
       * @eng
       * dialog title
       */
      readonly title?: string;
      /**
       * @中文
       * 对话框的图标，是一个URL或者图片对象
       * @eng
       * dialog icon, a URL or an image object
       */
      readonly icon?: string | Image;
      /**
       * @中文
       * 对话框文字内容
       * @eng
       * dialog content
       */
      readonly content?: string;
      /**
       * @中文
       * 对话框文字内容的颜色
       * @eng
       * dialog content color
       */
      readonly contentColor?: Color;
      /**
       * @中文
       * 对话框文字内容的行高倍数，1.0为一倍行高
       * @eng
       * dialog content line height, 1.0 is the same as the line height of the text
       */
      readonly contentLineSpacing?: number;
      /**
       * @中文
       * 对话框列表的选项
       *
       * @eng
       * dialog list options
       */
      readonly items?: Array<string>;
      /**
       * @中文
       * 对话框列表的选项的文字颜色
       * @eng
       * dialog list options color
       */
      readonly itemsColor?: Color;
      /**
       * @中文
       * 对话框列表的选项选择模式，可以为:`multi`、`single`、`select`，分别代表多选框、单选框、选择列表
       * @eng
       * dialog list options selection mode, can be: `multi`, `single`, `select`, respectively for multi-choice dialog, single-choice dialog, and selection list
       */
      readonly itemsSelectMode?: "multi" | "single" | "select";
      /**
       * @中文
       * 对话框列表中预先选中的项目索引，如果是单选模式为一个索引；多选模式则为数组
       * @eng
       * dialog list options selected index, if single mode, one index; if multi mode, an array
       */
      readonly itemsSelectedIndex?: number | Array<number>;
      /**
       * @中文
       * 对话框确定按钮的文字内容(最右边按钮)
       * @eng
       * dialog confirm button text
       */
      readonly positive?: string;
      /**
       * @中文
       * 对话框确定按钮的文字颜色(最右边按钮)
       * @eng
       * dialog confirm button color(the right button)
       */
      readonly positiveColor?: Color;
      /**
       * @中文
       * 对话框中立按钮的文字内容(最左边按钮)
       * @eng
       * dialog neutral button text(the middle button)
       */
      readonly neutral?: string;
      /**
       * @中文
       * 对话框中立按钮的文字颜色(最左边按钮)
       * @eng
       * dialog neutral button color(the left button)
       */
      readonly neutralColor?: Color;
      /**
       * @中文
       * 对话框取消按钮的文字内容(确定按钮左边的按钮)
       * @eng
       * dialog cancel button text(the left button of the confirm button)
       */
      readonly negative?: string;
      /**
       * @中文
       * 对话框取消按钮的文字颜色(确定按钮左边的按钮)
       * @eng
       * dialog cancel button color(the left button of the confirm button)
       */
      readonly negativeColor?: Color;
      /**
       * @中文
       * 勾选框文字内容
       * @eng
       * checkbox text
       */
      readonly checkBoxPrompt?: string;
      /**
       * @中文
       * 勾选框是否勾选
       * @eng
       * checkbox is checked
       */
      readonly checkBoxChecked?: boolean;
      /**
       * @中文
       * 对话框进度条配置项
       * @eng
       * dialog progress bar configuration
       */
      readonly progress?: {
          /**
           * @中文
           * 进度条的最大值
           * @eng
           * progress bar max value
           */
          max: number;
          /**
           * @中文
           * 进度条的当前数值
           * @eng
           * progress bar current value
           */
          progress?: number;
          /**
           * @中文
           * 是否显示进度条的最小指及最大值指示，默认为true
           * @eng
           * show progress bar min and max value
           */
          showMinMax?: boolean;
          /**
           * @中文
           * 是否显示为横向进度条，默认为false
           * @eng
           * show progress bar as horizontal
           */
          horizontal?: boolean;
      };
      /**
       * @中文
       * 对话框是否可取消，如果为`false`，则对话框只能用代码手动取消。默认为`false·。
       * @eng
       * dialog is cancelable, if `false`, dialog can only be canceled programmatically. Default is `false`.
       */
      readonly cancelable?: boolean;
      /**
       * @中文
       * 对话框是否在点击对话框以外区域时自动取消，默认为`true`
       * @eng
       * dialog is cancelable when click outside, default is `true`
       */
      readonly canceledOnTouchOutside?: boolean;
      /**
       * @中文
       * 对话框的输入框的输入提示
       * @eng
       */
      readonly inputHint?: string;
      /**
       * @中文
       * 对话框输入框的默认输入内容
       * @eng
       * dialog input default value
       */
      readonly inputPrefill?: string;
      /**
       * @中文
       * 对话框的自定义视图，可使用{@link inflateXml}创建。**使用自定义视图后，大部分对话框内的配置项，比如内容、进度条、输入框等将不再有效，需在自定义View中实现**
       * @eng
       * dialog custom view, use {@link inflateXml} to create. **After using custom view, most configuration items will be invalid, e.g. content, progress, input.**
       */
      readonly customView?: android.view.View;
      /**
       * @中文
       * 对话框是否使用滚动视图包裹内容，默认为`true`
       * @eng
       * dialog is scrollable, default is `true`
       */
      readonly wrapInScrollView?: boolean;
      /**
       * @中文
       * 对话框类型，参考{@link DialogType}。默认为`"app"`，即应用内对话框。
       * @eng
       * dialog type, see {@link DialogType}. Default is `"app"`.
       */
      readonly type?: DialogType;
  }
  /**
   * @中文
   * 对话框类型，基于Android原生[Dialog类](https://developer.android.com/reference/android/app/Dialog.html)拓展了一些方法和属性，参见{@link DialogExt}。
   *
   * @eng
   * Dialog type, extends from [Dialog](https://developer.android.com/reference/android/app/Dialog.html) to add some methods and properties. See {@link DialogExt}.
   *
   */
  export declare type Dialog = android.app.Dialog & DialogExt;
  /**
   * @中文
   * 对话框类型，基于Android原生[Dialog类](https://developer.android.com/reference/android/app/Dialog.html)拓展了一些事件，由{@link buildDialog}和{@link showDialog}创建。
   *
   * 对话框的事件列表参见{@link on}。
   *
   * @eng
   * Dialog type, extends from [Dialog](https://developer.android.com/reference/android/app/Dialog.html) to add some events. Created by {@link buildDialog} and {@link showDialog}.
   *
   * Dialog event list see {@link on}.
   *
   */
  export interface DialogExt extends EventEmitter {
      /**
       * @中文
       *
       * 确定按钮点击事件。
       *
       * @eng
       *
       * positive button click event.
       *
       * @event positive
       */
      on(event: 'positive', listener: (dialog: Dialog) => void): this;
      /**
       * @中文
       *
       * 中立按钮点击事件。
       *
       * @eng
       *
       * neutral button click event.
       *
       * @event neutral
       */
      on(event: 'neutral', listener: (dialog: Dialog) => void): this;
      /**
       * @中文
       *
       * 取消按钮点击事件。
       *
       * @eng
       *
       * negative button click event.
       *
       * @event neutral
       */
      on(event: 'negative', listener: (dialog: Dialog) => void): this;
      /**
       * @中文
       *
       * 带单选框的对话框确认或取消时通过此事件回调选择结果。`index`参数为选择的菜单项的索引，若用户取消选择则为`-1`；`text`参数为选择的菜单项的文本，若用户取消选择为`null`。
       *
       * @eng
       *
       * When the dialog box with the single choice box is confirmed or canceled, the selection result is called back by this event. The `index` parameter is the index of the selected menu item, or `-1` if the user deselected it; the `text` parameter is the text of the selected menu item, or `null` if the user deselected it.
       *
       * @event single_choice
       */
      on(event: 'single_choice', listener: (index: number, text: string | null, dialog: Dialog) => void): this;
      /**
       * @中文
       *
       * 带多选框的对话框确认或取消时通过此事件回调选择结果。`indices`参数为选择的菜单项的索引数组，若用户取消选择则为空数组；`texts`参数为选择的菜单项的文本数组，若用户取消选择为空数组。
       *
       * @eng
       *
       * When a dialog box with a multi-select box is confirmed or canceled, the selection result is called back by this event. The `indices` parameter is the index array of the selected menu items, or an empty array if the user deselects; the `texts` parameter is the text array of the selected menu items, or an empty array if the user deselects.
       *
       * @event multi_choice
       */
      on(event: 'multi_choice', listener: (indices: Array<number>, texts: Array<string>, dialog: Dialog) => void): this;
      /**
       * @中文
       *
       * 带选择菜单的对话框确认或取消时通过此事件回调选择结果。`index`参数为选择的菜单项的索引，若用户取消选择则为`-1`；`text`参数为选择的菜单项的文本，若用户取消选择为`null`。
       *
       * @eng
       *
       * When the dialog box with the selection menu is confirmed or canceled, the selection result is called back by this event. The `index` parameter is the index of the selected menu item, or `-1` if the user deselected it; the `text` parameter is the text of the selected menu item, or `null` if the user deselected it.
       *
       * @event item_select
       */
      on(event: 'item_select', listener: (index: number, text: string | null, dialog: Dialog) => void): this;
      /**
       * @中文
       *
       * 带输入框的对话框文本变化时触发该事件。
       *
       * @eng
       *
       * This event is triggered when text in input box changes.
       *
       * @event input
       */
      on(event: 'input_change', listener: (text: string, dialog: Dialog) => void): this;
      /**
       * @中文
       *
       * 带输入框的对话框确认或取消时，会将输入框的内容通过此事件回调。如果用户取消了输入，`text`参数会为`null`。
       *
       * @eng
       *
       * Dialog with input box, will callback `text` parameter when user confirm or cancel. If user cancel, `text` will be `null`.
       *
       * @event input
       */
      on(event: 'input', listener: (text: string, dialog: Dialog) => void): this;
      /**
       * @中文
       *
       * 对话框消失事件。
       *
       * @eng
       *
       * dialog dismiss event.
       *
       * @event dismiss
       */
      on(event: 'dismiss', listener: (dialog: Dialog) => void): this;
      /**
       * @中文
       *
       * 对话框取消事件，比如点击外部区域触发。
       *
       * @eng
       *
       * dialog cancel event, e.g. triggered when click outside of the dialog.
       *
       * @event cancel
       */
      on(event: 'cancel', listener: (dialog: Dialog) => void): this;
  }
  /**
   * @中文
   * 创建一个对话框。可自定义对话框的标题、内容、进度条、输入框、按钮等。
   *
   * @param properties 对话框的配置属性。参考 {@link DialogProperties}
   * @returns Dialog对象的Promise
   *
   * @eng
   * Create a dialog. You can customize dialog's title, content, progress, input, button, etc.
   *
   * @param properties Dialog's configuration properties. See {@link DialogProperties}
   * @returns Dialog object's Promise
   *
   * ```javascript
   * "nodejs";
   * const { buildDialog} = require("dialogs");
   * async function main() {
   *   const dialog = await buildDialog({
   *      title: "",
   *      content: "",
   *   }).on("positive", () => {
   *       console.log("positive");
   *   });
   *   dialog.show();
   * }
   * main();
   * ```
   */
  export declare function buildDialog(properties: DialogProperties): Promise<Dialog>;
  /**
   * @中文
   * 创建并显示一个对话框。类似于{@link buildDialog}构建对话框，但是构建后直接显示而无需调用`show`。
   *
   * @param properties 对话框的配置属性。参考 {@link DialogProperties}
   * @returns 对话框对象的Promise
   *
   * @eng
   *
   * Create and show a dialog. Similar to {@link buildDialog}, but show directly without calling `show`.
   *
   * @param properties Dialog's configuration properties. See {@link DialogProperties}
   * @returns Dialog object's Promise
   *
   */
  export declare function showDialog(properties: DialogProperties): Promise<Dialog>;
  

}
