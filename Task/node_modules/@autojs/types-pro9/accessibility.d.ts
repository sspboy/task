
declare module 'accessibility' {

  import { UiObject } from './ui_object';
  import { Image } from './image';
  import { SelectorQuery, UiSelector } from './ui_selector';
  export interface EnableServiceOptions {
      toast?: string | boolean;
  }
  export interface ToastEvent {
      readonly text: string;
      readonly packageName: string;
  }
  export interface Accessibility {
      /**
       * @中文
       *
       * 获取当前活跃窗口的根节点。若无障碍服务未启动，则会等待服务启动；若无法获取到根节点，则返回 `null`的Promise。
       *
       * @eng
       *
       * Get the root node of the active window. If the accessibility service is not enabled, it will wait for the service to be enabled. If it cannot get the root node, it will return `null` as a Promise.
       *
       */
      root(): Promise<UiObject | null>;
      rootOrNull(): UiObject | null;
      enableService(options?: EnableServiceOptions): Promise<android.accessibilityservice.AccessibilityService>;
      readonly service: android.accessibilityservice.AccessibilityService | null;
      readonly enabled: boolean;
      /**
       * @中文
       *
       * 监听Toast事件，当其他应用发出Toast时，会触发该事件。
       *
       * @param event Toast事件
       * @param listener
       *
       * @eng
       *
       * Listen to Toast events, when other applications send Toast, it will trigger this event.
       *
       * @param event Toast event
       * @param listener
       */
      on(event: 'toast', listener: (event: ToastEvent) => void): this;
      /**
       * @中文
       *
       * 启用按键监听，启用后可以通过`key_event`, `key_down`, `key_up`等事件监听按键。
       *
       * @eng
       *
       * Enable key events, after enabling, you can listen to the `key_event`, `key_down`, `key_up` events.
       */
      enableKeyEvents(): this;
      /**
       * @中文
       *
       * 禁用按键监听。
       *
       * @eng
       *
       * Disable monitoring key events.
       */
      disableKeyEvents(): this;
      /**
       * @中文
       *
       *
       *
       * @param event 按键事件，参考[KeyEvent](https://developer.android.com/reference/android/view/KeyEvent)
       * @param listener
       */
      on(event: 'key_event', listener: (keyCode: number, event: android.view.KeyEvent) => void): this;
      on(event: 'key_down', listener: (keyCode: number, event: android.view.KeyEvent) => void): this;
      on(event: 'key_up', listener: (keyCode: number, event: android.view.KeyEvent) => void): this;
      /**
       * @中文
       *
       * 清除无障碍控件缓存。
       *
       * @eng
       *
       * Clear the accessibility cache of ui object.
       */
      clearCache(): void;
  }
  export declare const accessibility: Accessibility;
  export interface Point {
      readonly x: number;
      readonly y: number;
  }
  export declare function click(x: number, y: number): Promise<boolean>;
  export declare function longClick(x: number, y: number): Promise<boolean>;
  export declare function press(x: number, y: number, duration: number): Promise<boolean>;
  export declare function swipe(x1: number, y1: number, x2: number, y2: number, duration: number): Promise<boolean>;
  export declare function performGesture(points: Point[], duration: number, delay?: number): Promise<boolean>;
  export declare function performGestures(gestures: StrokeDescription[]): Promise<boolean>;
  declare type GlobalAction = 'back' | 'home' | 'recents' | 'notifications' | 'quick_settings' | 'power_dialog' | 'toggle_split_screen' | 'lock_screen' | 'take_screenshot' | 'keycode_headsethook' | 'accessibility_button' | 'accessibility_shortcut' | 'accessibility_all_apps';
  export declare function performGlobalAction(action: number | GlobalAction): boolean;
  export declare function back(): boolean;
  export declare function home(): boolean;
  export declare function toggleRecents(): boolean;
  export declare function openNotifications(): boolean;
  export declare function openQuickSettings(): boolean;
  export declare function togglePowerDialog(): boolean;
  export declare function toggleSplitScreen(): boolean;
  export declare function lockScreen(): boolean;
  export declare function sendKeyCodeHeadsethook(): boolean;
  export declare function triggerAccessibilityButton(): boolean;
  export declare function triggerAccessibilityShortcut(): boolean;
  export declare function showLauncherAllApps(): boolean;
  export declare function takeScreenshot(displayId?: number): Promise<Image>;
  export declare function currentPackage(clearCache?: boolean): string | null;
  export declare function select(query?: SelectorQuery): UiSelector;
  export declare function clickText(text: string, index?: number): Promise<boolean>;
  export declare function inputText(text: string, index?: number): Promise<boolean>;
  export declare function setText(text: string, index?: number): Promise<boolean>;
  export declare function scrollForward(index?: number): Promise<boolean>;
  export declare function scrollBackward(index?: number): Promise<boolean>;
  export declare class StrokeDescription {
      private points;
      private duration;
      private delay;
      constructor(points: Point[], duration: number, delay?: number);
      toAndroidStrokeDescription(): android.accessibilityservice.GestureDescription.StrokeDescription;
  }
  export {};
  

}
