
declare module 'sensors' {

  /**
   * @中文
   *
   * sensors模块提供了获取手机上的传感器的信息的支持，这些传感器包括距离传感器、光线光感器、重力传感器、方向传感器等。需要指出的是，本模块只能获取传感器的数据，Auto.js Pro不提供模拟或伪造传感器的数据和事件的功能。
   *
   * @eng
   *
   * sensors module provides the support for getting the sensor information of the device, including the distance sensor, light sensor, gravity sensor, orientation sensor, etc. Note that this module can only get the sensor data, Auto.js Pro does not provide the simulation or fake sensor data and event function.
   *
   * @packageDocumentation
   */
  /// <reference types="node" />
  import { EventEmitter } from "events";
  declare type AndroidSensor = android.hardware.Sensor;
  /**
   * @中文
   *
   * 传感器事件的更新频率。
   *
   * 作为函数{@link SensorExt.enableSensorEvent}的参数，决定`change`事件的频率。
   *
   * @eng
   *
   * rate of events. This is only a hint to the system. events may be received faster or slower than the specified rate. Usually events are received faster.
   *
   * As the parameter of {@link SensorExt.enableSensorEvent}, determine the rate of `change` event.
   *
   */
  export declare enum SensorDelay {
      /**
       * @中文
       *
       * 尽可能快地获取传感器数据。
       *
       * @eng
       *
       * get sensor data as fast as possible
       */
      Fastest = 0,
      /**
       * @中文
       *
       * 适合游戏的传感器频率。
       *
       * @eng
       *
       * rate suitable for games
       */
      Game = 1,
      /**
       * @中文
       *
       * 适合UI的传感器频率。
       *
       * @eng
       *
       * rate suitable for the user interface
       */
      Ui = 2,
      /**
       * @中文
       *
       * 默认传感器事件频率。
       *
       * @eng
       *
       * rate (default) suitable for screen orientation changes
       */
      Normal = 3
  }
  /**
   * @中文
   *
   * {@link getSensor}返回的对象类型，在Android原生[Sensor类](https://developer.android.com/reference/android/hardware/Sensor)上拓展了额外的函数，参见{@link SensorExt}。
   *
   * @eng
   *
   * The type of object returned by {@link getSensor}, which extends the original [Android Sensor class](https://developer.android.com/reference/android/hardware/Sensor) with extra functions, see {@link SensorExt}.
   */
  export declare type Sensor = AndroidSensor & SensorExt;
  /**
   * @中文
   *
   * {@link getSensor}返回的对象的拓展，在Android原生[Sensor类](https://developer.android.com/reference/android/hardware/Sensor)上拓展了额外的函数，主要是{@link SensorExt.enableSensorEvent}和{@link SensorExt.disableSensorEvent}。
   *
   * @eng
   *
   * The extension of object returned by {@link getSensor}, which extends the original [Android Sensor class](https://developer.android.com/reference/android/hardware/Sensor) with extra functions, including {@link SensorExt.enableSensorEvent} and {@link SensorExt.disableSensorEvent}.
   */
  export interface SensorExt extends EventEmitter {
      /**
       * @中文
       *
       * 传感器数据回调事件。其回调的第一个参数是[android.hardware.SensorEvent](https://developer.android.com/reference/android/hardware/SensorEvent)对象，后面的参数则根据传感器类型不同而不同。
       *
       * 常见的传感器的参数类型为：
       *
       * * `accelerometer`: `(event: SensorEvent, ax: number, agy: number, az: number)`，表示各个方向的加速度，单位是`m/s^2`。
       * * `magnetic_field`: `(event: SensorEvent, hx: number, hy: number, hz: number)`，表示各个方向磁场强度，单位是`uT`。
       * * `orientation`: `(event: SensorEvent, azimuth: number, pitch: number, roll: number)`，表示方向，参见[SensorEvent.values](https://developer.android.com/reference/android/hardware/SensorEvent.html#values)。
       * * `gyroscope`: `(event: SensorEvent, axisX: number, axisY: number, axisZ: number)`，表示各个方向的角速度，单位是`rad/s`。
       * * `light`: `(event: SensorEvent, lux: number)`，表示光线强度，单位是`lx`。
       * * `pressure`: `(event: SensorEvent, pressure: number)`，表示气压，单位是`hPa`。
       * * `temperature`: `(event: SensorEvent, temperature: number)`，表示温度，单位是`°C`。
       * * `proximity`: `(event: SensorEvent, distance: number)`，表示距离，单位是`cm`。
       * * `gravity`: `(event: SensorEvent, gx: number, gy: number, gz: number)`，表示各个方向的重力加速度，单位是`m/s^2`。
       * * `linear_acceleration`: `(event: SensorEvent, ax: number, ay: number, az: number)`，表示各个方向的线性加速度，单位是`m/s^2`。
       *
       * @eng
       *
       * Sensor data event. The first parameter is an [android.hardware.SensorEvent](https://developer.android.com/reference/android/hardware/SensorEvent) object, and the rest of the parameters are according to the sensor type.
       *
       * The common sensor parameter type is:
       *
       * * `accelerometer`: `(event: SensorEvent, ax: number, agy: number, az: number)`，the acceleration in each direction, unit is `m/s^2`。
       * * `magnetic_field`: `(event: SensorEvent, hx: number, hy: number, hz: number)`，the magnetic field strength in each direction, unit is `uT`。
       * * `orientation`: `(event: SensorEvent, azimuth: number, pitch: number, roll: number)`, see [SensorEvent.values](https://developer.android.com/reference/android/hardware/SensorEvent.html#values)。
       * * `gyroscope`: `(event: SensorEvent, axisX: number, axisY: number, axisZ: number)`，the angular velocity in each direction, unit is `rad/s`。
       * * `light`: `(event: SensorEvent, lux: number)`，the light intensity, unit is `lx`。
       * * `pressure`: `(event: SensorEvent, pressure: number)`，the pressure, unit is `hPa`。
       * * `temperature`: `(event: SensorEvent, temperature: number)`，the temperature, unit is `°C`。
       * * `proximity`: `(event: SensorEvent, distance: number)`，the distance, unit is `cm`。
       * * `gravity`: `(event: SensorEvent, gx: number, gy: number, gz: number)`，the gravity acceleration in each direction, unit is `m/s^2`。
       * * `linear_acceleration`: `(event: SensorEvent, ax: number, ay: number, az: number)`，the linear acceleration in each direction, unit is `m/s^2`。
       *
       * @see [SensorEvent](https://developer.android.com/reference/android/hardware/SensorEvent)
       * @event change
       */
      on(event: "change", listener: (event: android.hardware.SensorEvent, ...args: any) => void): this;
      /**
       * @中文
       *
       * 传感器精度变化事件。传感器精度`accuracy`范围为0~3，0表示数据不可靠，1~3表示低精度到高精度。
       *
       * @eng
       *
       * Sensor accuracy change event. The sensor accuracy range is 0~3, 0 means data is unreliable, 1~3 means low to high accuracy.
       *
       * @see [onAccuracyChanged](https://developer.android.com/reference/android/hardware/SensorEventListener.html#onAccuracyChanged(android.hardware.Sensor,%20int))
       * @event accuracy_change
       */
      on(event: "accuracy_change", listener: (event: android.hardware.SensorEvent, accuracy: number) => void): this;
      /**
       * @中文
       *
       * 启用传感器事件。在调用本函数前，传感器将不会发送`change`和`accuracy_change`事件。
       *
       * @param delay 传感器事件频率
       *
       * @eng
       *
       * Enable sensor event. Before calling this function, the sensor will not send `change` and `accuracy_change` event.
       *
       * @param delay sensor event rate
       */
      enableSensorEvent(delay?: SensorDelay): this;
      /**
       * @中文
       *
       * 禁用传感器事件。在调用本函数后，传感器将不会发送`change`和`accuracy_change`事件。
       *
       * @eng
       *
       * Disable sensor event. After calling this function, the sensor will not send `change` and `accuracy_change` event.
       */
      disableSensorEvent(): this;
  }
  /**
   * @中文
   *
   * 通过传感器名称获取传感器对象，如果找不到该名称对应的传感器，则返回`undefined`。
   *
   * 常见的传感器列表有：
   * * `accelerometer` 加速度传感器
   * * `magnetic_field` 磁场传感器
   * * `orientation` 方向传感器
   * * `gyroscope` 陀螺仪传感器
   * * `light` 光线传感器
   * * `pressure` 压力传感器
   * * `temperature` 温度传感器
   * * `proximity` 接近(距离)传感器
   * * `gravity` 重力传感器
   * * `linear_acceleration` 线性加速度传感器
   *
   * 完整的列表参见[Sensor](https://developer.android.com/reference/android/hardware/Sensor#TYPE_ALL)。
   *
   * @param name 传感器名称
   * @returns 传感器对象，或者undefined
   *
   * @eng
   *
   *
   * Get the sensor object by the specified sensor name, or `undefined` if not found.
   *
   * A list of common sensors:
   * * `accelerometer`
   * * `magnetic_field`
   * * `orientation`
   * * `gyroscope`
   * * `light`
   * * `pressure`
   * * `temperature`
   * * `proximity`
   * * `gravity`
   * * `linear_acceleration`
   *
   * See [Sensor](https://developer.android.com/reference/android/hardware/Sensor#TYPE_ALL) for a full list.
   *
   * @param name the sensor name
   * @returns the sensor object, or undefined
   *
   * @example
   * ```javascript
   * "nodejs";
   * const { getSensor, SensorDelay } = require("sensors");
   *
   * const sensor = getSensor("light");
   * sensor.enableSensorEvent(SensorDelay.Normal)
   *       .on("change", (light) => {
   *           console.log(light);
   *       });
   * $autojs.keepRunning();
   * ```
   */
  export declare function getSensor(name: string): Sensor | undefined;
  export {};
  

}
