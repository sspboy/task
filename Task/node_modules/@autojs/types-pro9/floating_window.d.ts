
declare module 'floating_window' {

  /**
   * @中文
   *
   * floating_window模块提供显示悬浮窗，检查是否有悬浮窗权限等功能。
   *
   * 由于悬浮窗模块涉及UI交互，显示悬浮窗需要在UI线程中运行，因此需要在文件开始指定：
   * * `"ui-thread nodejs";`：仅悬浮窗，无UI页面Activity的情况
   * * `"ui nodejs";`：既有悬浮窗，又有UI页面Activity
   * * `"ui-thread";`：仅悬浮窗，无UI页面Activity，并且文件名本身用.node.js结尾
   * * `"ui";`：既有悬浮窗，又有UI页面Activity，并且文件名本身用.node.js结尾
   *
   * @eng
   *
   * floating_window module provides the function to show floating window, check if the user has permission to show floating window, etc.
   *
   * Because floating window module involves UI interaction, the function to show floating window needs to be run in UI thread, so at the start of the file you need to specify:
   * * `"ui-thread nodejs";`：only floating window, no UI page activity
   * * `"ui nodejs";` ：both floating window and UI page activity
   * * `"ui-thread";`：only floating window, no UI page activity, and the file name ends with .node.js
   * * `"ui";` ：both floating window and UI page activity, and the file name ends with .node.js
   *
   * @example
   * ```javascript
   * "ui-thread nodejs";
   *
   * const { createWindow } = require("floating_window");
   * const window = createWindow();
   * window.setViewFromXml(`
   *   <vertical bg="#ffffff">
   *       <text text="Node.js: ${process.version}" textColor="#aa0000" textSize="16" width="*"/>
   *   </vertical>
   *`);
   * window.show();
   * $autojs.keepRunning();
   * ```
   *
   * @packageDocumentation
   */
  import { Point, Size } from './ui';
  /**
   * @中文
   *
   * 创建悬浮窗的选项，用于指定悬浮窗的大小和位置。
   *
   * @eng
   *
   * Options for creating a floating window, used to specify the size and position of the window.
   */
  export interface CreateWindowOptions {
      /**
       * @中文
       *
       * 悬浮窗的初始位置，比如{x: 100, y: 200}。默认为{x: 0, y: 0}。
       *
       * @eng
       *
       * The initial position of the floating window, such as {x: 100, y: 200}. The default is {x: 0, y: 0}.
       */
      initialPosition?: Point;
      /**
       * @中文
       *
       * 悬浮窗的初始大小，比如{width: 100, height: 200}。默认为自适应大小。
       *
       * @eng
       *
       * The initial size of the floating window, such as {width: 100, height: 200}. The default is wrap content.
       */
      initialSize?: Size;
      /**
       * @中文
       *
       * 悬浮窗内容是否可以超出屏幕之外。
       *
       * @eng
       *
       * Whether the content of the floating window can exceed the screen.
       */
      layoutNoLimit?: boolean;
  }
  /**
   * @中文
   *
   * 是否自动贴边。如果为true，在拖拽结束时，悬浮窗会自动贴边；如果为bounce，则会跳跃多次后贴边，类似Auto.js Pro自带悬浮窗的弹性效果。
   *
   * @eng
   *
   * Whether to automatically stick to the edge. If true, when dragging ends, the floating window will stick to the edge; if is "bounce", it will bounce multiple times and stick to the edge, like Auto.js Pro's floating window.
   */
  export declare type KeepToEdgeType = "bounce" | boolean;
  /**
   * @中文
   *
   * 悬浮窗拖拽选项。
   *
   * @eng
   *
   * Dragging options of the floating window.
   */
  export interface DragGestureOptions {
      /**
       * @中文
       *
       * 悬浮窗贴边类型，可以为true, false或"bounce"，参见{@link KeepToEdgeType}。默认为false。
       *
       * @eng
       *
       * The type of sticking to the edge of the floating window, can be true, false or "bounce", see {@link KeepToEdgeType}. The default is false.
       */
      keepToEdge?: KeepToEdgeType;
      /**
       * @中文
       *
       * 当keepToEdge为"bounce"时，悬浮窗弹性跳跃的时长，默认为300，单位毫秒。
       *
       * @eng
       *
       * The duration of the floating window's elastic bounce, the default is 300 milliseconds.
       */
      bounceDuration?: number;
  }
  /**
   * @中文
   *
   * 悬浮窗对象。用于控制悬浮窗位置、大小、内容等。
   *
   * @eng
   *
   * Floating window object. Used to control the position, size, and content of the floating window.
   */
  export interface FloatingWindow {
      /**
       * @中文
       *
       * 解析xml为View，设置为悬浮窗的内容。
       *
       * @eng
       *
       * Parse xml to View, set as the content of the floating window.
       */
      setViewFromXml(xml: string): void;
      /**
       * @中文
       *
       * 设置给定的View为悬浮窗的内容。
       *
       * @eng
       *
       * Set the given View as the content of the floating window.
       */
      setView(view: android.view.View): void;
      /**
       * @中文
       *
       * 解析给定路径的xml文件为View，设置为悬浮窗的内容。读取文件是异步的，因此此函数也是异步的。
       *
       * @param xmlFile xml文件路径
       *
       * @eng
       *
       * Parse the given path of xml file to View, set as the content of the floating window. The reading of the file is asynchronous, so this function is also asynchronous.
       *
       * @param xmlFile xml file path
       */
      setViewFromXmlFile(xmlFile: string): Promise<void>;
      /**
       *
       * @中文
       *
       * 设置悬浮窗的位置，单位为像素。
       *
       * @param x x坐标
       * @param y y坐标
       *
       * @eng
       *
       * Set the position of the floating window.
       *
       * @param x x coordinate
       * @param y y coordinate
       */
      setPosition(x: number, y: number): Promise<void>;
      /**
       * @中文
       *
       * 悬浮窗的当前位置。
       *
       * @eng
       *
       * The current position of the floating window.
       */
      readonly position: Point;
      /**
       *
       * @中文
       *
       * 设置悬浮窗的大小，单位为像素。
       *
       * @param width 宽度，可能为负数，参见{@link Size}。
       * @param height 高度，可能为负数，参见{@link Size}。
       *
       * @eng
       *
       * Set the size of the floating window, unit is pixel.
       *
       * @param width width, can be negative, see {@link Size}
       * @param height height, can be negative, see {@link Size}
       *
       */
      setSize(width: number, height: number): Promise<void>;
      /**
       * @中文
       *
       * 悬浮窗的当前大小。
       *
       * @eng
       */
      readonly size: Size;
      /**
       * @中文
       *
       * 悬浮窗是否正在显示。
       *
       * @eng
       *
       * Whether the floating window is showing.
       */
      readonly isShowing: boolean;
      /**
       * @中文
       *
       * 显示悬浮窗。
       *
       * 需要注意的是，显示悬浮窗需要启动悬浮窗服务，若应用处于后台，可能会无法启动服务；另外，显示悬浮窗需要悬浮窗权限，如果没有权限，悬浮窗可能无法显示，可以使用{@link manageDrawOverlays}和{@link canDrawOverlays}来查询和跳转悬浮窗权限。
       *
       * @eng
       *
       * Show the floating window.
       *
       * Note that showing the floating window needs to start the floating window service, which may not be possible if the application is in the background. Also, showing the floating window needs floating window permission, if it does not have permission, the floating window may not be displayed. You can use {@link manageDrawOverlays} and {@link canDrawOverlays} to query and jump to floating window permission.
       */
      show(): Promise<void>;
      /**
       * @中文
       *
       * 关闭悬浮窗。
       *
       * @eng
       *
       * Close the floating window.
       */
      close(): Promise<void>;
      /**
       * @中文
       *
       * 启用悬浮窗的拖拽手势。
       *
       * @param view 启用拖拽手势的拖动锚点，拖动该View即可拖动整个悬浮窗
       * @param options 拖拽悬浮窗的选项
       * @returns DragGesture对象，可用于后续禁用手势
       *
       * @eng
       *
       * Enable drag gesture of the floating window.
       *
       * @param view the drag anchor view of the drag gesture, drag the View to drag the whole floating window
       * @param options drag options of the floating window
       * @returns DragGesture object, which can be used to disable the gesture
       */
      enableDrag(view: android.view.View, options?: DragGestureOptions): DragGesture;
  }
  /**
   * @中文
   *
   * {@link FloatingWindow.enableDrag}返回的对象，可用于禁用和重新启用拖拽手势。
   *
   * @eng
   *
   * The object returned by {@link FloatingWindow.enableDrag}, which can be used to disable and re-enable drag gesture.
   */
  export interface DragGesture {
      /**
       * @中文
       *
       * 设置拖拽手势是否启用。
       *
       * @eng
       *
       * Set whether the drag gesture is enabled.
       */
      setEnabled(enabled: boolean): void;
  }
  /**
   * @中文
   *
   * 创建一个新悬浮窗，可指定悬浮窗的初始大小、位置等参数。
   *
   * @param options 创建悬浮窗选项，参见{@link CreateWindowOptions}
   *
   * @eng
   *
   * Create a new floating window, with options to specify the initial size, position, etc.
   *
   * @param options create window options, see {@link CreateWindowOptions}
   */
  export declare function createWindow(options?: CreateWindowOptions): FloatingWindow;
  /**
   * @中文
   *
   * 判断是否有悬浮窗权限。
   *
   * @returns 如果本应用有悬浮窗权限，则返回 `true`，否则返回 `false`
   *
   * @eng
   *
   * Whether the app has floating window permission.
   *
   * @returns `true` if the app has floating window permission, otherwise `false`
   */
  export declare function canDrawOverlays(): boolean;
  /**
   * @中文
   *
   * 跳转到管理悬浮窗权限的页面。
   *
   * @eng
   *
   * Jump to the page to manage floating window permission.
   */
  export declare function manageDrawOverlays(): void;
  

}
