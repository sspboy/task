
declare module 'image' {

  /**
   * @中文
   *
   * image模块主要提供图片读写、灰度化、剪切、缩放、模板匹配等图像处理函数，其主要API在本页展示的函数以及{@link Image}类。
   *
   * 类似Pro 8中截图函数已迁移到{@link media_projection}模块。另外，要直接使用opencv相关函数和功能，参见{@link @autojs/opencv}模块。
   *
   * @eng
   *
   * image module provides image reading, grayscale, cropping, scaling, template matching, etc. functions. The main APIs are functions of this page and the {@link Image} class.
   *
   * The functions of screen capture have been moved to the {@link media_projection} module. Also, the functions of opencv are directly available in the {@link @autojs/opencv} module.
   *
   * @packageDocumentation
   */
  /// <reference types="node" />
  import * as cv from '@autojs/opencv';
  import { Mat } from '@autojs/opencv';
  import { Color, CompareColorOptions } from './color';
  export declare type ImageFormat = 'jpg' | 'jpeg' | 'png' | 'webp';
  /**
   * @中文
   *
   * 代表图像对象的类，通过opencv的{@link Mat}构造。或者通过{@link readImage}, {@link decodeImage}等函数从图片文件、链接、Base64中解析。
   *
   * @eng
   *
   * The class of image object, constructed by the {@link Mat}, or by {@link readImage}, {@link decodeImage} etc. functions.
   */
  export declare class Image {
      private _mat;
      private _c4mat?;
      constructor(mat: Mat);
      get mat(): Mat;
      /**
       * @中文
       *
       * 获取四通道（BGRA格式）的Mat对象。
       *
       * @eng
       *
       * Get the Mat object of the 4-channel (BGRA) format.
       */
      get c4mat(): Mat;
      /**
       * @中文
       *
       * 获取图像的宽度。
       *
       * @eng
       *
       * Get the width of the image.
       */
      get width(): number;
      /**
       * @中文
       *
       * 获取图像的高度。
       *
       * @eng
       *
       * Get the height of the image.
       */
      get height(): number;
      /**
       * @中文
       *
       * 获取图像在位置(x, y)处的颜色。若为三通道图像，则假设其为BGR格式；若为四通道图像，则假设其为BGRA格式；若为单通道图像，则假设其为灰度图。
       *
       * @eng
       *
       * Get the color at the position (x, y) of the image. If the image is a 3-channel image, then assume it is in BGR format; if it is a 4-channel image, then assume it is in BGRA format; if it is a single-channel image, then assume it is in gray-scale.
       *
       * @example
       * ```javascript
       * "nodejs";
       * const { loadImage } = require("image");
       *
       * async function main() {
       *     const img = await loadImage("https://picsum.photos/200/300");
       *     console.log(img.pixel(0, 0));
       * }
       * main();
       * ```
       */
      pixel(x: number, y: number): Color;
      /**
       * @中文
       *
       * 用给定的区域剪切图像，异步返回剪切后的图像。
       *
       * @param rect 指定剪切区域
       *
       * @eng
       *
       * Clip the image with the given region, return the clipped image asynchronously.
       *
       * @param rect The region to clip
       *
       * @example
       * ```javascript
       * "nodejs";
       * const cv = require("@autojs/opencv");
       * const { loadImage } = require("image");
       *
       * async function main() {
       *     const img = await loadImage("https://picsum.photos/200/300");
       *     console.log(await img.clip(new cv.Rect(0, 0, 100, 100)));
       * }
       * main();
       * ```
       */
      clip(rect: cv.Rect): Promise<Image>;
      /**
       * @中文
       *
       * 用给定的区域剪切图像，同步返回剪切后的图像。
       *
       * @param rect 指定剪切区域
       *
       * @eng
       *
       * Clip the image with the given region, return the clipped image synchronously.
       *
       * @param rect The region to clip
       *
       * @example
       * ```javascript
       * "nodejs";
       * const cv = require("@autojs/opencv");
       * const { loadImage } = require("image");
       *
       * async function main() {
       *     const img = await loadImage("https://picsum.photos/200/300");
       *     console.log(img.clipSync(new cv.Rect(0, 0, 100, 100)));
       * }
       * main();
       * ```
       */
      clipSync(rect: cv.Rect): Image;
      /**
       * @中文
       *
       * 缩放图像，异步返回缩放后的新图像。
       *
       * @param width 缩放后的宽度
       * @param height 缩放后的高度
       * @param interpolation 插值方式，默认为{@link cv.INTER_LINEAR}。可以为{@link cv.INTER_AREA}, {@link cv.INTER_CUBIC}, {@link cv.INTER_LANCZOS4}, {@link cv.INTER_LINEAR}, {@link cv.INTER_NEAREST}等。
       * @returns
       *
       * @eng
       *
       * Scale the image, return a new image asynchronously.
       *
       * @param width The width of the scaled image.
       * @param height The height of the scaled image.
       * @param interpolation Interpolation method, default is {@link cv.INTER_LINEAR}. Can be {@link cv.INTER_AREA}, {@link cv.INTER_CUBIC}, {@link cv.INTER_LANCZOS4}, {@link cv.INTER_LINEAR}, {@link cv.INTER_NEAREST}.
       */
      resize(width: number, height: number, interpolation?: number): Promise<Image>;
      /**
       * @中文
       *
       * 缩放图像，同步返回缩放后的新图像。
       *
       * @param width 缩放后的宽度
       * @param height 缩放后的高度
       * @param interpolation 插值方式，默认为{@link cv.INTER_LINEAR}。可以为{@link cv.INTER_AREA}, {@link cv.INTER_CUBIC}, {@link cv.INTER_LANCZOS4}, {@link cv.INTER_LINEAR}, {@link cv.INTER_NEAREST}等。
       * @returns
       *
       * @eng
       *
       * Scale the image, return a new image synchronously.
       *
       * @param width The width of the scaled image.
       * @param height The height of the scaled image.
       * @param interpolation Interpolation method, default is {@link cv.INTER_LINEAR}. Can be {@link cv.INTER_AREA}, {@link cv.INTER_CUBIC}, {@link cv.INTER_LANCZOS4}, {@link cv.INTER_LINEAR}, {@link cv.INTER_NEAREST}.
       */
      resizeSync(width: number, height: number, interpolation?: number): Image;
      /**
       * @中文
       *
       * 缩放图像，异步返回缩放后的新图像。
       *
       * @param fx x方向的缩放比例（宽度）
       * @param fy y方向的缩放比例（高度）
       * @param interpolation 插值方式，默认为{@link cv.INTER_LINEAR}。可以为{@link cv.INTER_AREA}, {@link cv.INTER_CUBIC}, {@link cv.INTER_LANCZOS4}, {@link cv.INTER_LINEAR}, {@link cv.INTER_NEAREST}等。
       * @returns
       *
       * @eng
       *
       * Scale the image, return a new image asynchronously.
       *
       * @param fx x-axis scaling ratio (width)
       * @param fy y-axis scaling ratio (height)
       * @param interpolation Interpolation method, default is {@link cv.INTER_LINEAR}. Can be {@link cv.INTER_AREA}, {@link cv.INTER_CUBIC}, {@link cv.INTER_LANCZOS4}, {@link cv.INTER_LINEAR}, {@link cv.INTER_NEAREST}.
       */
      scale(fx: number, fy: number, interpolation?: number): Promise<Image>;
      /**
       * @中文
       *
       * 缩放图像，同步返回缩放后的新图像。
       *
       * @param fx x方向的缩放比例（宽度）
       * @param fy y方向的缩放比例（高度）
       * @param interpolation 插值方式，默认为{@link cv.INTER_LINEAR}。可以为{@link cv.INTER_AREA}, {@link cv.INTER_CUBIC}, {@link cv.INTER_LANCZOS4}, {@link cv.INTER_LINEAR}, {@link cv.INTER_NEAREST}等。
       * @returns
       *
       * @eng
       *
       * Scale the image, return a new image synchronously.
       *
       * @param fx x-axis scaling ratio (width)
       * @param fy y-axis scaling ratio (height)
       * @param interpolation Interpolation method, default is {@link cv.INTER_LINEAR}. Can be {@link cv.INTER_AREA}, {@link cv.INTER_CUBIC}, {@link cv.INTER_LANCZOS4}, {@link cv.INTER_LINEAR}, {@link cv.INTER_NEAREST}.
       */
      scaleSync(fx: number, fy: number, interpolation?: number): Image;
      /**
       * @中文
       *
       * 将图像旋转以指定的center中心旋转degree角度。若不指定center，则默认为图像中心。异步返回旋转后的图像。
       *
       * @eng
       *
       * Rotate the image by the specified degree. If the center is not specified, then the center of the image is used. Asynchronously return the rotated image.
       */
      rotate(degree: number, center?: cv.Point2): Promise<Image>;
      /**
       * @中文
       *
       * 将图像旋转以指定的center中心旋转degree角度。若不指定center，则默认为图像中心。同步返回旋转后的图像。
       *
       * @eng
       *
       * Rotate the image by the specified degree. If the center is not specified, then the center of the image is used. Synchronously return the rotated image.
       */
      rotateSync(degree: number, center?: cv.Point2): Image;
      /**
       * @中文
       *
       * 将对象灰度化，异步返回灰度化后的新图片对象。
       *
       * @eng
       *
       * Grayscale the image, and return a new image object of the gray image asynchronously.
       *
       * @returns
       */
      grayscale(): Promise<Image>;
      /**
       * @中文
       *
       * 将对象灰度化，同步返回灰度化后的新图片对象。
       *
       * @eng
       *
       * Grayscale the image, and return a new image object of the gray image synchronously.
       */
      grayscaleSync(): Image;
      /**
       * @中文
       *
       * 将图像拷贝一份，返回新的Image对象的Promise。
       *
       * @eng
       *
       * Copy the image and return the promise of the new image instance.
       *
       */
      copy(): Promise<Image>;
      /**
       * @中文
       *
       * 将图像拷贝一份，并同步返回新的Image对象。
       *
       * @eng
       *
       * Copy the image and return the new image instance synchronously.
       *
       */
      copySync(): Image;
      /**
       * @中文
       *
       * 将图像转换为android的Bitmap对象。
       *
       * @eng
       *
       * Convert the image to an android Bitmap object.
       *
       * @see [Bitmap](https://developer.android.com/reference/android/graphics/Bitmap)
       */
      toBitmap(): android.graphics.Bitmap;
      /**
       * @中文
       *
       * 回收图像对象。回收后不应对本对象进行任何操作。
       *
       * @eng
       *
       * Release the image object. After release, the object should not be used.
       *
       */
      recycle(): void;
      /**
       * @中文
       *
       * 将android Bitmap对象转为Image对象。若Bitmap为空或非Bitmap对象，则抛出异常。
       *
       * @eng
       *
       * Convert an android Bitmap object to an Image object. If the Bitmap is null or not a Bitmap object, then throw an exception.
       *
       * @see [Bitmap](https://developer.android.com/reference/android/graphics/Bitmap)
       */
      static ofBitmap(bitmap: android.graphics.Bitmap): Image;
      private convertToTargetColor;
      private static of_ARGB_8888_Bitmap;
  }
  /**
   * @中文
   *
   * 读取指定路径的文件，同步返回Image对象。若文件不存在或无法解析，则抛出异常。
   *
   * @param file 文件路径，支持相对路径
   *
   * @eng
   *
   * Read the file at the specified path, and return the image object synchronously. If the file does not exist or cannot be decoded, then throw an exception.
   *
   * @param file the file path, support relative path
   */
  export declare function readImageSync(file: string): Image;
  /**
   * @中文
   *
   * 读取指定路径的文件，异步返回Image对象。若文件不存在或无法解析，则抛出异常。
   *
   * @param file 文件路径，支持相对路径
   *
   * @eng
   *
   * Read the file at the specified path, and return the image object asynchronously. If the file does not exist or cannot be decoded, then throw an exception.
   *
   * @param file the file path, support relative path
   */
  export declare function readImage(file: string): Promise<Image>;
  /**
   * @中文
   *
   * 加载指定url地址的图片，异步返回Image对象。若url无法访问或图片无法解析，则抛出异常。
   *
   * @param url 图片地址，需要以https或http开头
   *
   * @eng
   *
   * Load the file at the specified url, and return the image object asynchronously. If the url cannot be accessed or the image cannot be decoded, then throw an exception.
   *
   * @param url the url address, must start with https or http
   */
  export declare function loadImage(url: string): Promise<Image>;
  /**
   * @中文
   *
   * 将图片异步写入到指定的路径。
   *
   * @param file 文件路径，支持相对路径。文件路径需要以特定后缀名结束，目前支持的后缀名有：.jpg、.jpeg、.png、.webp。
   * @param quality 图片质量，范围0-100。默认值为100。
   *
   * @eng
   *
   * Write the image asynchronously to the specified path.
   *
   * @param file the file path, support relative path. The file path must end with one of the following extensions: .jpg, .jpeg, .png, .webp.
   * @param quality the image quality, range 0-100. The default value is 100.
   *
   * @example
   * ```javascript
   * "nodejs";
   *
   * const {loadImage, writeImage} = require("image");
   * async function main() {
   *    const img = await loadImage("https://picsum.photos/200/300");
   *    await writeImage("./output-200x300.png", img);
   * }
   * main();
   * ```
   *
   */
  export declare function writeImage(img: Image, file: string, quality?: number): Promise<void>;
  /**
   * @中文
   *
   * 将图片同步写入到指定的路径。
   *
   * @param file 文件路径，支持相对路径。文件路径需要以特定后缀名结束，目前支持的后缀名有：.jpg、.jpeg、.png、.webp。
   * @param quality 图片质量，范围0-100。默认值为100。
   *
   * @eng
   *
   * Write the image synchronously to the specified path.
   *
   * @param file the file path, support relative path. The file path must end with one of the following extensions: .jpg, .jpeg, .png, .webp.
   * @param quality the image quality, range 0-100. The default value is 100.
   *
   */
  export declare function writeImageSync(img: Image, file: string, quality?: number): void;
  /**
   * @中文
   *
   * 将字符串解码为图片对象，并异步返回该图片对象。若无法解码，则抛出异常。
   *
   * @param str 字符串，根据encoding参数决定格式，默认为base64
   * @param encoding 编码格式，默认为base64
   *
   * @eng
   *
   * Decode the string to image object, and return the image object asynchronously. If the string cannot be decoded, throw an exception.
   *
   * @param str the string, based on encoding parameter, default is base64
   * @param encoding the encoding format, default is base64
   */
  export declare function decodeImage(str: string, encoding?: BufferEncoding): Promise<Image>;
  /**
   * @中文
   *
   * 将字符串解码为图片对象，并同步返回该图片对象。若无法解码，则抛出异常。
   *
   * @param str 字符串，根据encoding参数决定格式，默认为base64
   * @param encoding 编码格式，默认为base64
   *
   * @eng
   *
   * Decode the string to image object, and return the image object synchronously. If the string cannot be decoded, throw an exception.
   *
   * @param str the string, based on encoding parameter, default is base64
   * @param encoding the encoding format, default is base64
   */
  export declare function decodeImageSync(str: string, encoding?: BufferEncoding): Image;
  /**
   * @中文
   *
   * 将图片编码为字符串，并异步返回编码后的字符串。
   *
   * @param encoding 编码格式，默认为base64
   * @param format 图片压缩格式，默认为png。可选的值有：png、jpg、jpeg、webp。
   * @param quality 图片质量，范围0-100。默认值为100。
   *
   * @eng
   *
   * Encode the image to string, and return the encoded string asynchronously.
   *
   * @param encoding the encoding format, default is base64
   * @param format the image compress format, default is png. The available values are: png, jpg, jpeg, webp.
   * @param quality the image quality, range 0-100. The default value is 100.
   *
   */
  export declare function encodeImage(img: Image, encoding?: BufferEncoding, format?: ImageFormat, quality?: number): Promise<string>;
  /**
   * @中文
   *
   * 将图片编码为字符串，并同步返回编码后的字符串。
   *
   * @param encoding 编码格式，默认为base64
   * @param format 图片压缩格式，默认为png。可选的值有：png、jpg、jpeg、webp。
   * @param quality 图片质量，范围0-100。默认值为100。
   *
   * @eng
   *
   * Encode the image to string, and return the encoded string synchronously.
   *
   * @param encoding the encoding format, default is base64
   * @param format the image compress format, default is png. The available values are: png, jpg, jpeg, webp.
   * @param quality the image quality, range 0-100. The default value is 100.
   *
   */
  export declare function encodeImageSync(img: Image, encoding?: BufferEncoding, format?: ImageFormat, quality?: number): string;
  /**
   * @中文
   *
   * 将图片编码为二进制数据，并异步返回编码后的Buffer对象。
   *
   * @param format 图片压缩格式，默认为png。可选的值有：png、jpg、jpeg、webp。
   * @param quality 图片质量，范围0-100。默认值为100。
   *
   * @eng
   *
   * Encode the image to Buffer, and return the encoded Buffer object asynchronously.
   *
   * @param format the image compress format, default is png. The available values are: png, jpg, jpeg, webp.
   * @param quality the image quality, range 0-100. The default value is 100.
   *
   */
  export declare function encodeImageToBuffer(img: Image, format?: ImageFormat, quality?: number): Promise<Buffer>;
  /**
   * @中文
   *
   * 将图片编码为二进制数据，并同步返回编码后的Buffer对象。
   *
   * @param format 图片压缩格式，默认为png。可选的值有：png、jpg、jpeg、webp。
   * @param quality 图片质量，范围0-100。默认值为100。
   *
   * @eng
   *
   * Encode the image to Buffer, and return the encoded Buffer object synchronously.
   *
   * @param format the image compress format, default is png. The available values are: png, jpg, jpeg, webp.
   * @param quality the image quality, range 0-100. The default value is 100.
   *
   */
  export declare function encodeImageToBufferSync(img: Image, format?: ImageFormat, quality?: number): Buffer;
  /**
   * @中文
   *
   * 从Buffer中解码图片，并异步返回解码后的图片对象。若无法解码，则抛出异常。
   *
   * @eng
   *
   * Decode the image from Buffer, and return the decoded image object asynchronously. If the decoding failed, throw an exception.
   *
   */
  export declare function decodeImageFromBuffer(buffer: Buffer): Promise<Image>;
  /**
   * @中文
   *
   * 从Buffer中解码图片，并同步返回解码后的图片对象。若无法解码，则抛出异常。
   *
   * @eng
   *
   * Decode the image from Buffer, and return the decoded image object synchronously. If the decoding failed, throw an exception.
   *
   */
  export declare function decodeImageFromBufferSync(buffer: Buffer): Image;
  export declare const MAX_LEVEL_AUTO = -1;
  /**
   * @中文
   *
   * 模板匹配选项，用于指定模板匹配的方法、匹配精度等。
   *
   * @eng
   *
   * Template matching options, used to specify the method of template matching, the matching accuracy etc.
   *
   * @see {@link findImage}
   *
   */
  export interface MatchTemplateOptions {
      readonly method?: number;
      readonly weakThreshold?: number;
      readonly threshold?: number;
      readonly level?: number;
      readonly max?: number;
      readonly useTransparentMask?: boolean;
  }
  export interface Match {
      similarity: number;
      point: cv.Point2;
  }
  export declare type Region = cv.Rect | Array<number>;
  export interface FindImageOptions {
      readonly threshold?: number;
      readonly level?: number;
      readonly region?: Region;
  }
  export declare function findImage(src: Image, template: Image, options?: FindImageOptions): Promise<cv.Point2 | null>;
  export declare function findImageInRegion(src: Image, template: Image, x: number, y: number, width?: number, height?: number, threshold?: number): Promise<cv.Point2 | null>;
  export declare function findImageSync(src: Image, template: Image, options?: FindImageOptions): cv.Point2 | null;
  export declare function findImageInRegionSync(src: Image, template: Image, x: number, y: number, width?: number, height?: number, threshold?: number): cv.Point2 | null;
  export interface FindColorOptions {
      readonly threshold?: number;
      readonly region?: Region;
  }
  export declare function findColorSync(src: Image, color: Color, options: FindColorOptions): cv.Point2 | null;
  export declare function findColor(src: Image, color: Color, options: FindColorOptions): Promise<cv.Point2 | null>;
  export declare function detectsColor(src: Image, color: Color, x: number, y: number, options?: CompareColorOptions): boolean;
  export interface ColorPath {
      readonly firstColor: Color;
      offsetColors: Array<OffsetColor>;
  }
  export interface OffsetColor {
      readonly color: Color;
      readonly offsetX: number;
      readonly offsetY: number;
  }
  export declare function findMultiColorsSync(src: Image, colors: ColorPath, options?: FindColorOptions): cv.Point2 | null;
  export declare function findMultiColors(src: Image, colors: ColorPath, options?: FindColorOptions): Promise<cv.Point2 | null>;
  export declare function detectsMultiColors(src: Image, colors: ColorPath, x: number, y: number, options?: CompareColorOptions): boolean;
  

}
