/// <reference types="node" />

declare module 'clip_manager' {

  /**
   * @中文
   *
   * 剪贴板模块，用于获取、设置剪贴板内容。**在Android 10以上，由于系统限制，在后台无法访问、监听剪贴板。**
   *
   * @eng
   *
   * Clipboard module, used to get and set clipboard content. In Android 10 or higher, unless the app has focus, the app cannot access clipboard data.
   *
   * @see [Limited access to clipboard data](https://developer.android.com/about/versions/10/privacy/changes#clipboard-data)
   *
   * @packageDocumentation
   */
  import EventEmitter from 'events';
  /**
   * @中文
   *
   * 剪贴板管理器。用于获取、设置、监听剪贴板内容
   *
   * 要使用它，请用`const { clipboardManager } = require('clip_manager')`导入。
   *
   * @eng
   *
   * Clipboard manager. Used to get, set, and listen to clipboard content.
   *
   * Using `const { clipboardManager } = require('clip_manager')` to import it.
   *
   */
  export interface ClipboardManager extends EventEmitter {
      /**
       * @中文
       *
       * 剪贴板变化事件。当前剪贴板内容发生变化时触发。
       *
       * @eng
       *
       * Clipboard change event. Triggered when the current clipboard content changes.
       *
       */
      on(event: 'clip_changed', listener: (() => void)): this;
      /**
       * @中文
       *
       * 设置剪贴板内容。
       *
       * @param text 文本内容
       *
       * @eng
       *
       * Set clipboard content.
       *
       * @param text Text content
       *
       */
      setClip(text: string): void;
      /**
       * @中文
       *
       * 获取剪贴板内容。
       *
       * @returns 文本内容。
       *
       * @eng
       *
       * Get clipboard content.
       *
       * @returns Text content
       */
      getClip(): string | null;
      /**
       * @中文
       *
       * 判断剪贴板是否有内容。
       *
       * @returns 如果有内容，返回true，否则返回false。
       *
       * @eng
       *
       * Determine if clipboard has content.
       *
       * @returns If there is content, return true, otherwise return false.
       *
       */
      hasClip(): boolean;
      /**
       * @中文
       *
       * 清除剪贴板内容。
       *
       * @eng
       *
       * Clear clipboard content.
       *
       */
      clearClip(): void;
  }
  /**
   * @中文
   *
   * 剪贴板管理器。用于获取、设置、监听剪贴板内容。
   *
   * @eng
   *
   * Clipboard manager. Used to get, set, and listen to clipboard content.
   *
   * @see {@link ClipboardManager}
   *
   * @example
   * ```javascript
   * const { clipboardManager, getClip } = require('clip_manager');
   * clipboardManager.on("clip_changed", () => {
   *   console.log("clipboard changed:", getClip());
   * });
   * $autojs.keepRunning();
   * ```
   */
  export declare const clipboardManager: ClipboardManager;
  /**
   * @中文
   *
   * 设置剪贴板内容。
   *
   * @param text 文本内容
   *
   * @eng
   *
   * Set clipboard content.
   *
   * @param text Text content
   *
   * @example
   * ```javascript
   * "nodejs";
   * const { setClip } = require('clip_manager');
   * setClip('Hello World!');
   * ```
   *
   */
  export declare function setClip(text: string): void;
  /**
   * @中文
   *
   * 获取剪贴板内容。
   *
   * @returns 文本内容。
   *
   * @eng
   *
   * Get clipboard content.
   *
   * @returns Text content
   *
   * @example
   * ```javascript
   * "nodejs";
   * const { getClip } = require('clip_manager');
   * console.log(getClip());
   * ```
   *
   */
  export declare function getClip(): string | null;
  /**
   * @中文
   *
   * 判断剪贴板是否有内容。
   *
   * @returns 如果有内容，返回true，否则返回false。
   *
   * @eng
   *
   * Determine if clipboard has content.
   *
   * @returns If there is content, return true, otherwise return false.
   *
   * @example
   * ```javascript
   * "nodejs";
   * const { hasClip } = require('clip_manager');
   * console.log(hasClip());
   * ```
   */
  export declare function hasClip(): boolean;
  /**
   * @中文
   *
   * 清除剪贴板内容。
   *
   * @eng
   *
   * Clear clipboard content.
   *
   * @example
   * ```javascript
   * "nodejs";
   * const { clearClip } = require('clip_manager');
   * clearClip();
   * ```
   */
  export declare function clearClip(): void;
  

}
