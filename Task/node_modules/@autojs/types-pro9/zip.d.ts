
declare module 'zip' {

  /**
   * @中文
   *
   * Zip模块用于处理文件的压缩和解压，并支持加密压缩。
   *
   * @eng
   *
   * The Zip module provides APIs to handle file compression and decompression, and supports encryption.
   *
   * @see [zip4j](https://javadoc.io/doc/net.lingala.zip4j/zip4j/1.3.2/index.html)
   *
   * @packageDocumentation
   */
  /**
   * @中文
   *
   * 压缩文件夹下所有文件/文件夹，生成到目标路径`dest`。
   *
   * @param dir 需要压缩的文件夹路径，如果文件夹下有子文件夹均会一并压缩
   * @param dest 压缩后的压缩包存放路径
   * @param options 可选参数
   *
   * @eng
   *
   * Compress all files and folders under `dir` to `dest`.
   *
   * @param dir The path of the folder to be compressed.
   * @param dest The path of the target zip file.
   * @param options Optional parameters.
   *
   * @example
   * ```javascript
   * const { zipDir } = require('zip');
   * zipDir('./dir', './dest.zip')
   *  .then(zipFile => console.log(zipFile));
   * ```
   *
   */
  export declare function zipDir(dir: string, dest: string, options?: ZipOptions): Promise<ZipFile>;
  /**
   * @中文
   *
   * 压缩单文件`file`到路径`dest`。
   * @param file 需要压缩的单文件路径。
   * @param dest 压缩后的压缩包存放路径
   * @param options 选项
   *
   * @eng
   *
   * Compress a single file `file` to `dest`.
   * @param file The path of the file to be compressed.
   * @param dest The path of the target zip file.
   * @param options Optional parameters.
   *
   * @example
   * ```javascript
   * const { zipFile } = require('zip');
   * zipFile('./file.txt', './dest.zip')
   *  .then(zipFile => console.log(zipFile));
   * ```
   */
  export declare function zipFile(file: string, dest: string, options?: ZipOptions): Promise<ZipFile>;
  /**
   * @中文
   *
   * 压缩多个文件`fileList`到路径`dest`。`fileList`中不能包含文件夹。
   * @param fileList 需压缩的多个文件路径的数组
   * @param dest 压缩目标路径
   * @param options 选项
   *
   * @eng
   *
   * Compress multiple files `fileList` to `dest`. `fileList` cannot contain folders.
   *
   * @param fileList The array of paths of the files to be compressed.
   * @param dest The path of the target zip file.
   * @param options Optional parameters.
   *
   * @example
   * ```javascript
   * const { zipFiles } = require('zip');
   * zipFiles(['./file1.txt', './file2.txt'], './dest.zip')
   *  .then(zipFile => console.log(zipFile));
   * ```
   */
  export declare function zipFiles(fileList: Array<string>, dest: string, options?: ZipOptions): Promise<ZipFile>;
  /**
   * @中文
   *
   * 解压zip文件。如果文件夹`dest`不存在则创建该文件夹并将内容解压到里面；如果`dest`已经存在，则在`dest`下面创建一个和`zipFile`文件同名的文件夹，并将内容解压到里面。
   *
   * @param zipFile 需解压的压缩包文件路径
   * @param dest 解压后的文件夹目录
   * @param options 解压选项，可选
   *
   * @eng
   *
   * Unzip a zip file. If `dest` directory does not exist, create it and unzip the content to it; if `dest` directory exists, create a folder with the same name as `zipFile` in `dest` and unzip the content to it.
   *
   * @example
   * ```javascript
   * "nodejs";
   * const { unzip, zipDir } = require('zip');
   *
   * async function main() {
   *     // create a zip file with password
   *     const zipFilePath = './dest.zip';
   *     await zipDir('./dir', zipFilePath, { password: 'Auto.js Pro' });
   *     // unzip the zip file
   *     await unzip(zipFilePath, './dest', { password: 'Auto.js Pro' });
   * }
   * main();
   * ```
   */
  export declare function unzip(zipFile: string, dest: string, options?: UnzipOptions): Promise<void>;
  /**
   * @中文
   *
   * 打开一个zip文件，返回{@link ZipFile}对象，可对该对象进行进一步的zip操作。
   *
   * @param file 压缩包文件路径
   *
   * @eng
   *
   * Open a zip file and return a `ZipFile` object. You can perform more operations on the returned object.
   *
   * @param file The path of the zip file.
   */
  export declare function open(file: string): ZipFile;
  /**
   * @中文
   *
   * 压缩选项。
   *
   * @eng
   *
   * Compression options.
   *
   * @example
   * ```javascript
   * const { zipDir } = require('zip');
   * zipDir('./dir', './dest.zip', {
   *    compressionLevel: 9,
   *    password: '123456',
   *    includeRootFolder: false,
   * });
   * ```
   *
   * @see {@link zipDir}
   * @see {@link zipFiles}
   * @see {@link zipFile}
   * @see {@link ZipFile.addFolder}
   * @see {@link ZipFile.addFile}
   * @see {@link ZipFile.addFiles}
   */
  export interface ZipOptions {
      /**
       * @中文
       *
       * AES加密强度，包括`AES_STRENGTH_128`，`AES_STRENGTH_192`，`AES_STRENGTH_256`
       *
       * @eng
       *
       * AES encryption strength, including `AES_STRENGTH_128`, `AES_STRENGTH_192`, `AES_STRENGTH_256`
       */
      aesKeyStrength?: "AES_STRENGTH_128" | "AES_STRENGTH_192" | "AES_STRENGTH_256";
      /**
       * @中文
       *
       * 压缩级别，0~9，0为不压缩，9为最好压缩（速度较慢）。默认为5（正常压缩）。
       *
       * @eng
       *
       * Compression level, 0~9, 0 means no compression, 9 is the smallest size (slow). Default is 5 (normal compression).
       */
      compressionLevel?: number;
      /**
       * @中文
       *
       * 压缩方式，`COMP_STORE`为仅打包不压缩, `COMP_DEFLATE`为压缩（默认）
       *
       * @eng
       *
       * Compression method, `COMP_STORE` means store the file without compression, `COMP_DEFLATE` means compress (default)
       */
      compressionMethod?: "COMP_STORE" | "COMP_DEFLATE";
      /**
       * @中文
       *
       * 压缩或添加文件时，指定文件在压缩包的默认文件夹位置。
       *
       * @eng
       *
       * Specify the default folder path when compressing or adding files.
       */
      defaultFolderPath?: string;
      /**
       * @中文
       *
       * 加密方法，`ENC_NO_ENCRYPTION`为不加密(默认)，`ENC_METHOD_STANDARD`为标准机密, `ENC_METHOD_AES`为AES加密
       *
       * @eng
       *
       * Encryption method, `ENC_NO_ENCRYPTION` means no encryption (default), `ENC_METHOD_STANDARD` means standard encryption, `ENC_METHOD_AES` means AES encryption
       */
      encryptionMethod?: "ENC_NO_ENCRYPTION" | "ENC_METHOD_STANDARD" | "ENC_METHOD_AES";
      /**
       * @中文
       *
       * 压缩或添加文件时，指定文件在压缩包中的路径、名称。
       *
       * @eng
       *
       * Specify the path and name of the file when compressing or adding file.
       *
       * @see {@link ZipFile.addFile}
       * @see {@link ZipFile.addFolder}
       */
      fileNameInZip?: string;
      /**
       * @中文
       *
       * 设置标志以指示添加文件的父文件夹是否将包含在ZIP中。如果为true，则添加文件的父文件夹将包含在ZIP中。默认为true。
       *
       * @eng
       *
       * Set the flag to indicate whether the root folder will be included in the ZIP. Default is true.
       *
       * @see {@link ZipFile.addFolder}
       * @see {@link zipDir}
       */
      includeRootFolder?: boolean;
      /**
       * @中文
       *
       * 加密压缩的密码。如果设置密码但不设置加密方法，则加密方法默认为AES。
       *
       * @eng
       *
       * Password for encryption. If set password but not set encryption method, the encryption method will be AES.
       */
      password?: string;
      /**
       * @中文
       *
       * 压缩文件夹时是否包含隐藏文件。如果为true，则在将文件夹添加到zip时将包含隐藏文件。默认为true。
       *
       * @eng
       *
       * Whether to include hidden files when compressing folder. If true, hidden files will be included when compressing folder. Default is true.
       */
      readHiddenFiles?: boolean;
      /**
       * @中文
       *
       * 设置压缩包首目录的文件夹名称，如果没有首目录，则创建这个首目录。
       *
       * @eng
       *
       * Set the name of the root folder in the ZIP.
       *
       * @see {@link ZipFile.addFolder}
       * @see {@link zipDir}
       */
      rootFolderInZip?: string;
  }
  /**
   * @中文
   *
   * * alls 所有属性
   * * archive 压缩包属性
   * * dateTime 时间
   * * hidden 是否隐藏
   * * readOnly 是否只读
   * * system 是否为系统文件
   *
   * @eng
   *
   * @see {@link UnzipOptions.ignoreAttributes}
   */
  export declare type ZipFileAttribute = "all" | "archive" | "dateTime" | "hidden" | "system" | "readOnly";
  /**
   * @中文
   *
   * 解压选项。
   *
   * @eng
   *
   * Unzip options.
   *
   * @see {@link unzip}
   * @see {@link ZipFile.extractFile}
   * @see {@link ZipFile.extractAll}
   */
  export interface UnzipOptions {
      /**
       * @中文
       *
       * 解压文件写入磁盘时，要忽略的文件属性。默认为空。
       *
       * @eng
       *
       * File attributes to ignore when writing files to disk. Default is empty.
       *
       * @example
       *
       * ```javascript
       * const { unzip } = require("zip");
       * unzip("test.zip", "./dest", { ignoreAttributes: ["hidden", "system"] })
       *   .then(() => console.log("unzip success"));
       * ```
       */
      ignoreAttributes?: Array<ZipFileAttribute>;
      /**
       * @中文
       *
       * 解压时用于加密文件的密码。
       *
       * @eng
       *
       * Password for decrypting files.
       */
      password?: string;
  }
  /**
   *
   * @中文
   *
   *
   * {@link open}返回的对象，用于在压缩包中增删文件、获取文件头信息、解压等。
   */
  export interface ZipFile {
      /**
       * @中文
       *
       * 获取当前压缩包的路径。
       *
       * @eng
       *
       * Get the path of the current ZIP file.
       */
      getPath(): string;
      /**
       * @中文
       *
       * 获取当前压缩包是否是一个有效的压缩包。
       * 如果选择的路径不是一个压缩包或该文件不存在，均返回`false`。
       *
       * @returns 是否是有效压缩包
       *
       * @eng
       *
       * Get whether the current ZIP file is a valid ZIP file.
       * If the path is not a ZIP file or the file does not exist, return `false`.
       *
       * @returns Whether the current ZIP file is a valid ZIP file.
       */
      isValidZipFile(): boolean;
      /**
       * @中文
       *
       * 如果文件是一个加密的压缩包，必须用此函数设置正确的解压密码，才能解压出加密的文件。
       * 未设置密码尝试解压加密的压缩包将抛出异常，选择的压缩包文件不存在使用本函数将抛出`ZipException`。
       *
       * @param password 密码
       *
       * @eng
       *
       * If the ZIP file is encrypted, you must use this function to set the correct password to decrypt the encrypted file.
       * If you do not set the password, an exception will be thrown when you try to decrypt the encrypted ZIP file.
       *
       * @param password Password
       */
      setPassword(password: string): void;
      /**
       * @中文
       *
       * 获取当前压缩包是否是加密压缩包。
       *
       * @returns 是否压缩包加密
       *
       * @eng
       *
       * Get whether the current ZIP file is an encrypted ZIP file.
       *
       * @returns Whether the current ZIP file is an encrypted ZIP file.
       *
       */
      isEncrypted(): boolean;
      /**
       * @中文
       *
       * 在压缩包中添加指定文件。
       *
       * @param file 本地文件路径
       * @param options 压缩选项
       *
       * @eng
       *
       * Add a file to the ZIP file.
       *
       * @param file Local file path
       * @param options Compress options
       *
       * @example
       * ```javascript
       * const zip = require('zip);
       * async function main() {
       *     const zipFile = await zip.open('test.zip');
       *     await zipFile.addFile('test.txt');
       * }
       * main();
       * ```
       */
      addFile(file: string, options?: ZipOptions): Promise<void>;
      /**
       * @中文
       *
       * 在压缩包中添加多个文件。
       *
       * @param fileList 要添加的本地文件路径的数组
       * @param options 压缩选项，可选
       *
       * @eng
       *
       * Add multiple files to the ZIP file.
       *
       * @param fileList Array of local file paths
       * @param options Compress options
       */
      addFiles(fileList: Array<string>, options?: ZipOptions): Promise<void>;
      /**
       * @中文
       *
       * 在压缩包中添加指定文件夹。
       *
       * @param folder 文件夹路径
       * @param options 压缩选项
       *
       * @eng
       *
       * Add a folder to the ZIP file.
       *
       * @param folder Folder path
       * @param options Compress options
       */
      addFolder(folder: string, options?: ZipOptions): Promise<void>;
      /**
       * @中文
       *
       * 删除zip文件内的指定文件。此方法首先找到文件头，然后删除文件；如果文件不存在，则此方法引发异常。
       *
       * 如果zip文件是分割后的zip文件，则此方法会抛出异常，zip规范不允许更新拆分的zip档案。
       *
       * @param file 要删除的文件
       *
       * @eng
       *
       * Delete a file from the ZIP file. If the file does not exist, this method will throw an exception.
       *
       * If the ZIP file is a segmented ZIP file, this method will throw an exception, because the zip specification does not allow updating a segmented ZIP file.
       *
       * @param file File to delete
       *
       */
      removeFile(file: string): Promise<void>;
      /**
       * @中文
       *
       * 从压缩包文件中提取特定文件到目标路径。如果目标路径无效，则此方法将引发异常。
       *
       * @param file 要解压的文件
       * @param dest 解压文件的目标路径
       * @param options 解压选项
       * @param newFileName 解压后文件的新名字，可选
       *
       * @eng
       *
       * Extract a file from the ZIP file. If the target path is invalid, this method will throw an exception.
       *
       * @param file File to extract
       * @param dest Destination path
       * @param options Extract options
       * @param newFileName New file name, optional
       */
      extractFile(file: string, dest: string, options?: UnzipOptions, newFileName?: string): Promise<void>;
      /**
       * @中文
       *
       * 解压所有文件到目标路径`dest`。
       * @param dest 解压路径
       * @param options 解压选项
       *
       * @eng
       *
       * Extract all files from the ZIP file to the target path `dest`.
       *
       * @param dest Extract path
       * @param options Extract options
       */
      extractAll(dest: string, options?: UnzipOptions): Promise<void>;
      /**
       * @中文
       *
       * 获取压缩包内指定文件的文件头信息。文件头信息包括校验值，是否加密，注释等。
       * @param file 压缩包内指定文件路径
       * @returns [FileHeader](https://javadoc.io/doc/net.lingala.zip4j/zip4j/1.3.2/net/lingala/zip4j/model/FileHeader.html)
       *
       * @eng
       *
       * Get the file header information of the specified file in the ZIP file. The file header information includes the checksum, whether the file is encrypted, comments, etc.
       * @param file File path in the ZIP file
       * @returns [FileHeader](https://javadoc.io/doc/net.lingala.zip4j/zip4j/1.3.2/net/lingala/zip4j/model/FileHeader.html)
       */
      getFileHeader(file: string): JavaObject;
      /**
       * @中文
       *
       * 获取压缩包内所有文件的文件头信息。文件头信息包括校验值，是否加密，注释等。
       * @returns [FileHeader](https://javadoc.io/doc/net.lingala.zip4j/zip4j/1.3.2/net/lingala/zip4j/model/FileHeader.html)的数组
       *
       * @eng
       *
       * Get the file header information of all files in the ZIP file. The file header information includes the checksum, whether the file is encrypted, comments, etc.
       * @returns Array of [FileHeader](https://javadoc.io/doc/net.lingala.zip4j/zip4j/1.3.2/net/lingala/zip4j/model/FileHeader.html)
       */
      getFileHeaders(): Array<JavaObject>;
  }
  

}
